/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.6
 * source: messages.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class Connect extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): Connect {
        const message = new Connect({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Connect {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Connect();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Connect {
        return Connect.deserialize(bytes);
    }
}
export class Disconnect extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): Disconnect {
        const message = new Disconnect({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Disconnect {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Disconnect();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Disconnect {
        return Disconnect.deserialize(bytes);
    }
}
export class Receive extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): Receive {
        const message = new Receive({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Receive {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Receive();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Receive {
        return Receive.deserialize(bytes);
    }
}
export class Send extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): Send {
        const message = new Send({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Send {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Send();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Send {
        return Send.deserialize(bytes);
    }
}
export class Request extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): Request {
        const message = new Request({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Request {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Request();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Request {
        return Request.deserialize(bytes);
    }
}
export class Remove extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): Remove {
        const message = new Remove({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Remove {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Remove();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Remove {
        return Remove.deserialize(bytes);
    }
}
export class ClearDesk extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): ClearDesk {
        const message = new ClearDesk({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClearDesk {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClearDesk();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ClearDesk {
        return ClearDesk.deserialize(bytes);
    }
}
export class Notification extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): Notification {
        const message = new Notification({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Notification {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Notification();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Notification {
        return Notification.deserialize(bytes);
    }
}
export class Leave extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): Leave {
        const message = new Leave({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Leave {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Leave();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Leave {
        return Leave.deserialize(bytes);
    }
}
export class GameEnd extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        results?: Results;
        request?: never;
    } | {
        results?: never;
        request?: Request;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("results" in data && data.results != undefined) {
                this.results = data.results;
            }
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
        }
    }
    get results() {
        return pb_1.Message.getWrapperField(this, Results, 1) as Results;
    }
    set results(value: Results) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_results() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get request() {
        return pb_1.Message.getWrapperField(this, Request, 2) as Request;
    }
    set request(value: Request) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_request() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get type() {
        const cases: {
            [index: number]: "none" | "results" | "request";
        } = {
            0: "none",
            1: "results",
            2: "request"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        results?: ReturnType<typeof Results.prototype.toObject>;
        request?: ReturnType<typeof Request.prototype.toObject>;
    }): GameEnd {
        const message = new GameEnd({});
        if (data.results != null) {
            message.results = Results.fromObject(data.results);
        }
        if (data.request != null) {
            message.request = Request.fromObject(data.request);
        }
        return message;
    }
    toObject() {
        const data: {
            results?: ReturnType<typeof Results.prototype.toObject>;
            request?: ReturnType<typeof Request.prototype.toObject>;
        } = {};
        if (this.results != null) {
            data.results = this.results.toObject();
        }
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_results)
            writer.writeMessage(1, this.results, () => this.results.serialize(writer));
        if (this.has_request)
            writer.writeMessage(2, this.request, () => this.request.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameEnd {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameEnd();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.results, () => message.results = Results.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.request, () => message.request = Request.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GameEnd {
        return GameEnd.deserialize(bytes);
    }
}
export class Connection extends pb_1.Message {
    #one_of_decls: number[][] = [[3, 4, 5]];
    constructor(data?: any[] | ({
        rating?: number;
    } & (({
        join?: Connect;
        disconnect?: never;
        leave?: never;
    } | {
        join?: never;
        disconnect?: Disconnect;
        leave?: never;
    } | {
        join?: never;
        disconnect?: never;
        leave?: Leave;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("rating" in data && data.rating != undefined) {
                this.rating = data.rating;
            }
            if ("join" in data && data.join != undefined) {
                this.join = data.join;
            }
            if ("disconnect" in data && data.disconnect != undefined) {
                this.disconnect = data.disconnect;
            }
            if ("leave" in data && data.leave != undefined) {
                this.leave = data.leave;
            }
        }
    }
    get rating() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set rating(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get join() {
        return pb_1.Message.getWrapperField(this, Connect, 3) as Connect;
    }
    set join(value: Connect) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_join() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get disconnect() {
        return pb_1.Message.getWrapperField(this, Disconnect, 4) as Disconnect;
    }
    set disconnect(value: Disconnect) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get has_disconnect() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get leave() {
        return pb_1.Message.getWrapperField(this, Leave, 5) as Leave;
    }
    set leave(value: Leave) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
    }
    get has_leave() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get type() {
        const cases: {
            [index: number]: "none" | "join" | "disconnect" | "leave";
        } = {
            0: "none",
            3: "join",
            4: "disconnect",
            5: "leave"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5])];
    }
    static fromObject(data: {
        rating?: number;
        join?: ReturnType<typeof Connect.prototype.toObject>;
        disconnect?: ReturnType<typeof Disconnect.prototype.toObject>;
        leave?: ReturnType<typeof Leave.prototype.toObject>;
    }): Connection {
        const message = new Connection({});
        if (data.rating != null) {
            message.rating = data.rating;
        }
        if (data.join != null) {
            message.join = Connect.fromObject(data.join);
        }
        if (data.disconnect != null) {
            message.disconnect = Disconnect.fromObject(data.disconnect);
        }
        if (data.leave != null) {
            message.leave = Leave.fromObject(data.leave);
        }
        return message;
    }
    toObject() {
        const data: {
            rating?: number;
            join?: ReturnType<typeof Connect.prototype.toObject>;
            disconnect?: ReturnType<typeof Disconnect.prototype.toObject>;
            leave?: ReturnType<typeof Leave.prototype.toObject>;
        } = {};
        if (this.rating != null) {
            data.rating = this.rating;
        }
        if (this.join != null) {
            data.join = this.join.toObject();
        }
        if (this.disconnect != null) {
            data.disconnect = this.disconnect.toObject();
        }
        if (this.leave != null) {
            data.leave = this.leave.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.rating != 0)
            writer.writeInt32(2, this.rating);
        if (this.has_join)
            writer.writeMessage(3, this.join, () => this.join.serialize(writer));
        if (this.has_disconnect)
            writer.writeMessage(4, this.disconnect, () => this.disconnect.serialize(writer));
        if (this.has_leave)
            writer.writeMessage(5, this.leave, () => this.leave.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Connection {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Connection();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 2:
                    message.rating = reader.readInt32();
                    break;
                case 3:
                    reader.readMessage(message.join, () => message.join = Connect.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.disconnect, () => message.disconnect = Disconnect.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.leave, () => message.leave = Leave.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Connection {
        return Connection.deserialize(bytes);
    }
}
export class Licitiranje extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        type?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set type(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        type?: number;
    }): Licitiranje {
        const message = new Licitiranje({});
        if (data.type != null) {
            message.type = data.type;
        }
        return message;
    }
    toObject() {
        const data: {
            type?: number;
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type != 0)
            writer.writeInt32(1, this.type);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Licitiranje {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Licitiranje();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Licitiranje {
        return Licitiranje.deserialize(bytes);
    }
}
export class LicitiranjeStart extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): LicitiranjeStart {
        const message = new LicitiranjeStart({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LicitiranjeStart {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LicitiranjeStart();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LicitiranjeStart {
        return LicitiranjeStart.deserialize(bytes);
    }
}
export class Card extends pb_1.Message {
    #one_of_decls: number[][] = [[3, 4, 5, 6]];
    constructor(data?: any[] | ({
        id?: string;
        userId?: string;
    } & (({
        receive?: Receive;
        send?: never;
        request?: never;
        remove?: never;
    } | {
        receive?: never;
        send?: Send;
        request?: never;
        remove?: never;
    } | {
        receive?: never;
        send?: never;
        request?: Request;
        remove?: never;
    } | {
        receive?: never;
        send?: never;
        request?: never;
        remove?: Remove;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("userId" in data && data.userId != undefined) {
                this.userId = data.userId;
            }
            if ("receive" in data && data.receive != undefined) {
                this.receive = data.receive;
            }
            if ("send" in data && data.send != undefined) {
                this.send = data.send;
            }
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("remove" in data && data.remove != undefined) {
                this.remove = data.remove;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get userId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set userId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get receive() {
        return pb_1.Message.getWrapperField(this, Receive, 3) as Receive;
    }
    set receive(value: Receive) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_receive() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get send() {
        return pb_1.Message.getWrapperField(this, Send, 4) as Send;
    }
    set send(value: Send) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get has_send() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get request() {
        return pb_1.Message.getWrapperField(this, Request, 5) as Request;
    }
    set request(value: Request) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
    }
    get has_request() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get remove() {
        return pb_1.Message.getWrapperField(this, Remove, 6) as Remove;
    }
    set remove(value: Remove) {
        pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
    }
    get has_remove() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get type() {
        const cases: {
            [index: number]: "none" | "receive" | "send" | "request" | "remove";
        } = {
            0: "none",
            3: "receive",
            4: "send",
            5: "request",
            6: "remove"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5, 6])];
    }
    static fromObject(data: {
        id?: string;
        userId?: string;
        receive?: ReturnType<typeof Receive.prototype.toObject>;
        send?: ReturnType<typeof Send.prototype.toObject>;
        request?: ReturnType<typeof Request.prototype.toObject>;
        remove?: ReturnType<typeof Remove.prototype.toObject>;
    }): Card {
        const message = new Card({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.userId != null) {
            message.userId = data.userId;
        }
        if (data.receive != null) {
            message.receive = Receive.fromObject(data.receive);
        }
        if (data.send != null) {
            message.send = Send.fromObject(data.send);
        }
        if (data.request != null) {
            message.request = Request.fromObject(data.request);
        }
        if (data.remove != null) {
            message.remove = Remove.fromObject(data.remove);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            userId?: string;
            receive?: ReturnType<typeof Receive.prototype.toObject>;
            send?: ReturnType<typeof Send.prototype.toObject>;
            request?: ReturnType<typeof Request.prototype.toObject>;
            remove?: ReturnType<typeof Remove.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.userId != null) {
            data.userId = this.userId;
        }
        if (this.receive != null) {
            data.receive = this.receive.toObject();
        }
        if (this.send != null) {
            data.send = this.send.toObject();
        }
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.remove != null) {
            data.remove = this.remove.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.userId.length)
            writer.writeString(2, this.userId);
        if (this.has_receive)
            writer.writeMessage(3, this.receive, () => this.receive.serialize(writer));
        if (this.has_send)
            writer.writeMessage(4, this.send, () => this.send.serialize(writer));
        if (this.has_request)
            writer.writeMessage(5, this.request, () => this.request.serialize(writer));
        if (this.has_remove)
            writer.writeMessage(6, this.remove, () => this.remove.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Card {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Card();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.userId = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.receive, () => message.receive = Receive.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.send, () => message.send = Send.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.request, () => message.request = Request.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.remove, () => message.remove = Remove.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Card {
        return Card.deserialize(bytes);
    }
}
export class GameStartCountdown extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        countdown?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("countdown" in data && data.countdown != undefined) {
                this.countdown = data.countdown;
            }
        }
    }
    get countdown() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set countdown(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        countdown?: number;
    }): GameStartCountdown {
        const message = new GameStartCountdown({});
        if (data.countdown != null) {
            message.countdown = data.countdown;
        }
        return message;
    }
    toObject() {
        const data: {
            countdown?: number;
        } = {};
        if (this.countdown != null) {
            data.countdown = this.countdown;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.countdown != 0)
            writer.writeInt32(1, this.countdown);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameStartCountdown {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameStartCountdown();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.countdown = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GameStartCountdown {
        return GameStartCountdown.deserialize(bytes);
    }
}
export class User extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        name?: string;
        position?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("position" in data && data.position != undefined) {
                this.position = data.position;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get position() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set position(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        id?: string;
        name?: string;
        position?: number;
    }): User {
        const message = new User({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.position != null) {
            message.position = data.position;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            name?: string;
            position?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.position != null) {
            data.position = this.position;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.position != 0)
            writer.writeInt32(3, this.position);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.position = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): User {
        return User.deserialize(bytes);
    }
}
export class ResultsUser extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user?: User[];
        playing?: boolean;
        points?: number;
        trula?: number;
        pagat?: number;
        igra?: number;
        razlika?: number;
        kralj?: number;
        kralji?: number;
        kontra_pagat?: number;
        kontra_igra?: number;
        kontra_kralj?: number;
        mondfang?: boolean;
        show_gamemode?: boolean;
        show_difference?: boolean;
        show_kralj?: boolean;
        show_pagat?: boolean;
        show_kralji?: boolean;
        show_trula?: boolean;
        radelc?: boolean;
        skisfang?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
            if ("playing" in data && data.playing != undefined) {
                this.playing = data.playing;
            }
            if ("points" in data && data.points != undefined) {
                this.points = data.points;
            }
            if ("trula" in data && data.trula != undefined) {
                this.trula = data.trula;
            }
            if ("pagat" in data && data.pagat != undefined) {
                this.pagat = data.pagat;
            }
            if ("igra" in data && data.igra != undefined) {
                this.igra = data.igra;
            }
            if ("razlika" in data && data.razlika != undefined) {
                this.razlika = data.razlika;
            }
            if ("kralj" in data && data.kralj != undefined) {
                this.kralj = data.kralj;
            }
            if ("kralji" in data && data.kralji != undefined) {
                this.kralji = data.kralji;
            }
            if ("kontra_pagat" in data && data.kontra_pagat != undefined) {
                this.kontra_pagat = data.kontra_pagat;
            }
            if ("kontra_igra" in data && data.kontra_igra != undefined) {
                this.kontra_igra = data.kontra_igra;
            }
            if ("kontra_kralj" in data && data.kontra_kralj != undefined) {
                this.kontra_kralj = data.kontra_kralj;
            }
            if ("mondfang" in data && data.mondfang != undefined) {
                this.mondfang = data.mondfang;
            }
            if ("show_gamemode" in data && data.show_gamemode != undefined) {
                this.show_gamemode = data.show_gamemode;
            }
            if ("show_difference" in data && data.show_difference != undefined) {
                this.show_difference = data.show_difference;
            }
            if ("show_kralj" in data && data.show_kralj != undefined) {
                this.show_kralj = data.show_kralj;
            }
            if ("show_pagat" in data && data.show_pagat != undefined) {
                this.show_pagat = data.show_pagat;
            }
            if ("show_kralji" in data && data.show_kralji != undefined) {
                this.show_kralji = data.show_kralji;
            }
            if ("show_trula" in data && data.show_trula != undefined) {
                this.show_trula = data.show_trula;
            }
            if ("radelc" in data && data.radelc != undefined) {
                this.radelc = data.radelc;
            }
            if ("skisfang" in data && data.skisfang != undefined) {
                this.skisfang = data.skisfang;
            }
        }
    }
    get user() {
        return pb_1.Message.getRepeatedWrapperField(this, User, 1) as User[];
    }
    set user(value: User[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get playing() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set playing(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get points() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set points(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get trula() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set trula(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get pagat() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set pagat(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get igra() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set igra(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get razlika() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set razlika(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get kralj() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set kralj(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get kralji() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set kralji(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get kontra_pagat() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set kontra_pagat(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get kontra_igra() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set kontra_igra(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get kontra_kralj() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set kontra_kralj(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get mondfang() {
        return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
    }
    set mondfang(value: boolean) {
        pb_1.Message.setField(this, 13, value);
    }
    get show_gamemode() {
        return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
    }
    set show_gamemode(value: boolean) {
        pb_1.Message.setField(this, 14, value);
    }
    get show_difference() {
        return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
    }
    set show_difference(value: boolean) {
        pb_1.Message.setField(this, 15, value);
    }
    get show_kralj() {
        return pb_1.Message.getFieldWithDefault(this, 16, false) as boolean;
    }
    set show_kralj(value: boolean) {
        pb_1.Message.setField(this, 16, value);
    }
    get show_pagat() {
        return pb_1.Message.getFieldWithDefault(this, 17, false) as boolean;
    }
    set show_pagat(value: boolean) {
        pb_1.Message.setField(this, 17, value);
    }
    get show_kralji() {
        return pb_1.Message.getFieldWithDefault(this, 18, false) as boolean;
    }
    set show_kralji(value: boolean) {
        pb_1.Message.setField(this, 18, value);
    }
    get show_trula() {
        return pb_1.Message.getFieldWithDefault(this, 19, false) as boolean;
    }
    set show_trula(value: boolean) {
        pb_1.Message.setField(this, 19, value);
    }
    get radelc() {
        return pb_1.Message.getFieldWithDefault(this, 20, false) as boolean;
    }
    set radelc(value: boolean) {
        pb_1.Message.setField(this, 20, value);
    }
    get skisfang() {
        return pb_1.Message.getFieldWithDefault(this, 21, false) as boolean;
    }
    set skisfang(value: boolean) {
        pb_1.Message.setField(this, 21, value);
    }
    static fromObject(data: {
        user?: ReturnType<typeof User.prototype.toObject>[];
        playing?: boolean;
        points?: number;
        trula?: number;
        pagat?: number;
        igra?: number;
        razlika?: number;
        kralj?: number;
        kralji?: number;
        kontra_pagat?: number;
        kontra_igra?: number;
        kontra_kralj?: number;
        mondfang?: boolean;
        show_gamemode?: boolean;
        show_difference?: boolean;
        show_kralj?: boolean;
        show_pagat?: boolean;
        show_kralji?: boolean;
        show_trula?: boolean;
        radelc?: boolean;
        skisfang?: boolean;
    }): ResultsUser {
        const message = new ResultsUser({});
        if (data.user != null) {
            message.user = data.user.map(item => User.fromObject(item));
        }
        if (data.playing != null) {
            message.playing = data.playing;
        }
        if (data.points != null) {
            message.points = data.points;
        }
        if (data.trula != null) {
            message.trula = data.trula;
        }
        if (data.pagat != null) {
            message.pagat = data.pagat;
        }
        if (data.igra != null) {
            message.igra = data.igra;
        }
        if (data.razlika != null) {
            message.razlika = data.razlika;
        }
        if (data.kralj != null) {
            message.kralj = data.kralj;
        }
        if (data.kralji != null) {
            message.kralji = data.kralji;
        }
        if (data.kontra_pagat != null) {
            message.kontra_pagat = data.kontra_pagat;
        }
        if (data.kontra_igra != null) {
            message.kontra_igra = data.kontra_igra;
        }
        if (data.kontra_kralj != null) {
            message.kontra_kralj = data.kontra_kralj;
        }
        if (data.mondfang != null) {
            message.mondfang = data.mondfang;
        }
        if (data.show_gamemode != null) {
            message.show_gamemode = data.show_gamemode;
        }
        if (data.show_difference != null) {
            message.show_difference = data.show_difference;
        }
        if (data.show_kralj != null) {
            message.show_kralj = data.show_kralj;
        }
        if (data.show_pagat != null) {
            message.show_pagat = data.show_pagat;
        }
        if (data.show_kralji != null) {
            message.show_kralji = data.show_kralji;
        }
        if (data.show_trula != null) {
            message.show_trula = data.show_trula;
        }
        if (data.radelc != null) {
            message.radelc = data.radelc;
        }
        if (data.skisfang != null) {
            message.skisfang = data.skisfang;
        }
        return message;
    }
    toObject() {
        const data: {
            user?: ReturnType<typeof User.prototype.toObject>[];
            playing?: boolean;
            points?: number;
            trula?: number;
            pagat?: number;
            igra?: number;
            razlika?: number;
            kralj?: number;
            kralji?: number;
            kontra_pagat?: number;
            kontra_igra?: number;
            kontra_kralj?: number;
            mondfang?: boolean;
            show_gamemode?: boolean;
            show_difference?: boolean;
            show_kralj?: boolean;
            show_pagat?: boolean;
            show_kralji?: boolean;
            show_trula?: boolean;
            radelc?: boolean;
            skisfang?: boolean;
        } = {};
        if (this.user != null) {
            data.user = this.user.map((item: User) => item.toObject());
        }
        if (this.playing != null) {
            data.playing = this.playing;
        }
        if (this.points != null) {
            data.points = this.points;
        }
        if (this.trula != null) {
            data.trula = this.trula;
        }
        if (this.pagat != null) {
            data.pagat = this.pagat;
        }
        if (this.igra != null) {
            data.igra = this.igra;
        }
        if (this.razlika != null) {
            data.razlika = this.razlika;
        }
        if (this.kralj != null) {
            data.kralj = this.kralj;
        }
        if (this.kralji != null) {
            data.kralji = this.kralji;
        }
        if (this.kontra_pagat != null) {
            data.kontra_pagat = this.kontra_pagat;
        }
        if (this.kontra_igra != null) {
            data.kontra_igra = this.kontra_igra;
        }
        if (this.kontra_kralj != null) {
            data.kontra_kralj = this.kontra_kralj;
        }
        if (this.mondfang != null) {
            data.mondfang = this.mondfang;
        }
        if (this.show_gamemode != null) {
            data.show_gamemode = this.show_gamemode;
        }
        if (this.show_difference != null) {
            data.show_difference = this.show_difference;
        }
        if (this.show_kralj != null) {
            data.show_kralj = this.show_kralj;
        }
        if (this.show_pagat != null) {
            data.show_pagat = this.show_pagat;
        }
        if (this.show_kralji != null) {
            data.show_kralji = this.show_kralji;
        }
        if (this.show_trula != null) {
            data.show_trula = this.show_trula;
        }
        if (this.radelc != null) {
            data.radelc = this.radelc;
        }
        if (this.skisfang != null) {
            data.skisfang = this.skisfang;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user.length)
            writer.writeRepeatedMessage(1, this.user, (item: User) => item.serialize(writer));
        if (this.playing != false)
            writer.writeBool(2, this.playing);
        if (this.points != 0)
            writer.writeInt32(3, this.points);
        if (this.trula != 0)
            writer.writeInt32(4, this.trula);
        if (this.pagat != 0)
            writer.writeInt32(5, this.pagat);
        if (this.igra != 0)
            writer.writeInt32(6, this.igra);
        if (this.razlika != 0)
            writer.writeInt32(7, this.razlika);
        if (this.kralj != 0)
            writer.writeInt32(8, this.kralj);
        if (this.kralji != 0)
            writer.writeInt32(9, this.kralji);
        if (this.kontra_pagat != 0)
            writer.writeInt32(10, this.kontra_pagat);
        if (this.kontra_igra != 0)
            writer.writeInt32(11, this.kontra_igra);
        if (this.kontra_kralj != 0)
            writer.writeInt32(12, this.kontra_kralj);
        if (this.mondfang != false)
            writer.writeBool(13, this.mondfang);
        if (this.show_gamemode != false)
            writer.writeBool(14, this.show_gamemode);
        if (this.show_difference != false)
            writer.writeBool(15, this.show_difference);
        if (this.show_kralj != false)
            writer.writeBool(16, this.show_kralj);
        if (this.show_pagat != false)
            writer.writeBool(17, this.show_pagat);
        if (this.show_kralji != false)
            writer.writeBool(18, this.show_kralji);
        if (this.show_trula != false)
            writer.writeBool(19, this.show_trula);
        if (this.radelc != false)
            writer.writeBool(20, this.radelc);
        if (this.skisfang != false)
            writer.writeBool(21, this.skisfang);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResultsUser {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResultsUser();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.user, () => pb_1.Message.addToRepeatedWrapperField(message, 1, User.deserialize(reader), User));
                    break;
                case 2:
                    message.playing = reader.readBool();
                    break;
                case 3:
                    message.points = reader.readInt32();
                    break;
                case 4:
                    message.trula = reader.readInt32();
                    break;
                case 5:
                    message.pagat = reader.readInt32();
                    break;
                case 6:
                    message.igra = reader.readInt32();
                    break;
                case 7:
                    message.razlika = reader.readInt32();
                    break;
                case 8:
                    message.kralj = reader.readInt32();
                    break;
                case 9:
                    message.kralji = reader.readInt32();
                    break;
                case 10:
                    message.kontra_pagat = reader.readInt32();
                    break;
                case 11:
                    message.kontra_igra = reader.readInt32();
                    break;
                case 12:
                    message.kontra_kralj = reader.readInt32();
                    break;
                case 13:
                    message.mondfang = reader.readBool();
                    break;
                case 14:
                    message.show_gamemode = reader.readBool();
                    break;
                case 15:
                    message.show_difference = reader.readBool();
                    break;
                case 16:
                    message.show_kralj = reader.readBool();
                    break;
                case 17:
                    message.show_pagat = reader.readBool();
                    break;
                case 18:
                    message.show_kralji = reader.readBool();
                    break;
                case 19:
                    message.show_trula = reader.readBool();
                    break;
                case 20:
                    message.radelc = reader.readBool();
                    break;
                case 21:
                    message.skisfang = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ResultsUser {
        return ResultsUser.deserialize(bytes);
    }
}
export class Stih extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        card?: Card[];
        worth?: number;
        pickedUpByPlaying?: boolean;
        pickedUpBy?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("card" in data && data.card != undefined) {
                this.card = data.card;
            }
            if ("worth" in data && data.worth != undefined) {
                this.worth = data.worth;
            }
            if ("pickedUpByPlaying" in data && data.pickedUpByPlaying != undefined) {
                this.pickedUpByPlaying = data.pickedUpByPlaying;
            }
            if ("pickedUpBy" in data && data.pickedUpBy != undefined) {
                this.pickedUpBy = data.pickedUpBy;
            }
        }
    }
    get card() {
        return pb_1.Message.getRepeatedWrapperField(this, Card, 1) as Card[];
    }
    set card(value: Card[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get worth() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set worth(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get pickedUpByPlaying() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set pickedUpByPlaying(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    get pickedUpBy() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set pickedUpBy(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        card?: ReturnType<typeof Card.prototype.toObject>[];
        worth?: number;
        pickedUpByPlaying?: boolean;
        pickedUpBy?: string;
    }): Stih {
        const message = new Stih({});
        if (data.card != null) {
            message.card = data.card.map(item => Card.fromObject(item));
        }
        if (data.worth != null) {
            message.worth = data.worth;
        }
        if (data.pickedUpByPlaying != null) {
            message.pickedUpByPlaying = data.pickedUpByPlaying;
        }
        if (data.pickedUpBy != null) {
            message.pickedUpBy = data.pickedUpBy;
        }
        return message;
    }
    toObject() {
        const data: {
            card?: ReturnType<typeof Card.prototype.toObject>[];
            worth?: number;
            pickedUpByPlaying?: boolean;
            pickedUpBy?: string;
        } = {};
        if (this.card != null) {
            data.card = this.card.map((item: Card) => item.toObject());
        }
        if (this.worth != null) {
            data.worth = this.worth;
        }
        if (this.pickedUpByPlaying != null) {
            data.pickedUpByPlaying = this.pickedUpByPlaying;
        }
        if (this.pickedUpBy != null) {
            data.pickedUpBy = this.pickedUpBy;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.card.length)
            writer.writeRepeatedMessage(1, this.card, (item: Card) => item.serialize(writer));
        if (this.worth != 0)
            writer.writeFloat(2, this.worth);
        if (this.pickedUpByPlaying != false)
            writer.writeBool(3, this.pickedUpByPlaying);
        if (this.pickedUpBy.length)
            writer.writeString(4, this.pickedUpBy);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Stih {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Stih();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.card, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Card.deserialize(reader), Card));
                    break;
                case 2:
                    message.worth = reader.readFloat();
                    break;
                case 3:
                    message.pickedUpByPlaying = reader.readBool();
                    break;
                case 4:
                    message.pickedUpBy = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Stih {
        return Stih.deserialize(bytes);
    }
}
export class Results extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user?: ResultsUser[];
        stih?: Stih[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
            if ("stih" in data && data.stih != undefined) {
                this.stih = data.stih;
            }
        }
    }
    get user() {
        return pb_1.Message.getRepeatedWrapperField(this, ResultsUser, 1) as ResultsUser[];
    }
    set user(value: ResultsUser[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get stih() {
        return pb_1.Message.getRepeatedWrapperField(this, Stih, 2) as Stih[];
    }
    set stih(value: Stih[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        user?: ReturnType<typeof ResultsUser.prototype.toObject>[];
        stih?: ReturnType<typeof Stih.prototype.toObject>[];
    }): Results {
        const message = new Results({});
        if (data.user != null) {
            message.user = data.user.map(item => ResultsUser.fromObject(item));
        }
        if (data.stih != null) {
            message.stih = data.stih.map(item => Stih.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            user?: ReturnType<typeof ResultsUser.prototype.toObject>[];
            stih?: ReturnType<typeof Stih.prototype.toObject>[];
        } = {};
        if (this.user != null) {
            data.user = this.user.map((item: ResultsUser) => item.toObject());
        }
        if (this.stih != null) {
            data.stih = this.stih.map((item: Stih) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user.length)
            writer.writeRepeatedMessage(1, this.user, (item: ResultsUser) => item.serialize(writer));
        if (this.stih.length)
            writer.writeRepeatedMessage(2, this.stih, (item: Stih) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Results {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Results();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.user, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ResultsUser.deserialize(reader), ResultsUser));
                    break;
                case 2:
                    reader.readMessage(message.stih, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Stih.deserialize(reader), Stih));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Results {
        return Results.deserialize(bytes);
    }
}
export class GameStart extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user?: User[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
        }
    }
    get user() {
        return pb_1.Message.getRepeatedWrapperField(this, User, 1) as User[];
    }
    set user(value: User[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        user?: ReturnType<typeof User.prototype.toObject>[];
    }): GameStart {
        const message = new GameStart({});
        if (data.user != null) {
            message.user = data.user.map(item => User.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            user?: ReturnType<typeof User.prototype.toObject>[];
        } = {};
        if (this.user != null) {
            data.user = this.user.map((item: User) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user.length)
            writer.writeRepeatedMessage(1, this.user, (item: User) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameStart {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameStart();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.user, () => pb_1.Message.addToRepeatedWrapperField(message, 1, User.deserialize(reader), User));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GameStart {
        return GameStart.deserialize(bytes);
    }
}
export class UserList extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user?: User[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
        }
    }
    get user() {
        return pb_1.Message.getRepeatedWrapperField(this, User, 1) as User[];
    }
    set user(value: User[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        user?: ReturnType<typeof User.prototype.toObject>[];
    }): UserList {
        const message = new UserList({});
        if (data.user != null) {
            message.user = data.user.map(item => User.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            user?: ReturnType<typeof User.prototype.toObject>[];
        } = {};
        if (this.user != null) {
            data.user = this.user.map((item: User) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user.length)
            writer.writeRepeatedMessage(1, this.user, (item: User) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserList {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserList();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.user, () => pb_1.Message.addToRepeatedWrapperField(message, 1, User.deserialize(reader), User));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UserList {
        return UserList.deserialize(bytes);
    }
}
export class KingSelection extends pb_1.Message {
    #one_of_decls: number[][] = [[2, 3, 4]];
    constructor(data?: any[] | ({
        card?: string;
    } & (({
        request?: Request;
        send?: never;
        notification?: never;
    } | {
        request?: never;
        send?: Send;
        notification?: never;
    } | {
        request?: never;
        send?: never;
        notification?: Notification;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("card" in data && data.card != undefined) {
                this.card = data.card;
            }
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("send" in data && data.send != undefined) {
                this.send = data.send;
            }
            if ("notification" in data && data.notification != undefined) {
                this.notification = data.notification;
            }
        }
    }
    get card() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set card(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get request() {
        return pb_1.Message.getWrapperField(this, Request, 2) as Request;
    }
    set request(value: Request) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_request() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get send() {
        return pb_1.Message.getWrapperField(this, Send, 3) as Send;
    }
    set send(value: Send) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_send() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get notification() {
        return pb_1.Message.getWrapperField(this, Notification, 4) as Notification;
    }
    set notification(value: Notification) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get has_notification() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get type() {
        const cases: {
            [index: number]: "none" | "request" | "send" | "notification";
        } = {
            0: "none",
            2: "request",
            3: "send",
            4: "notification"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4])];
    }
    static fromObject(data: {
        card?: string;
        request?: ReturnType<typeof Request.prototype.toObject>;
        send?: ReturnType<typeof Send.prototype.toObject>;
        notification?: ReturnType<typeof Notification.prototype.toObject>;
    }): KingSelection {
        const message = new KingSelection({});
        if (data.card != null) {
            message.card = data.card;
        }
        if (data.request != null) {
            message.request = Request.fromObject(data.request);
        }
        if (data.send != null) {
            message.send = Send.fromObject(data.send);
        }
        if (data.notification != null) {
            message.notification = Notification.fromObject(data.notification);
        }
        return message;
    }
    toObject() {
        const data: {
            card?: string;
            request?: ReturnType<typeof Request.prototype.toObject>;
            send?: ReturnType<typeof Send.prototype.toObject>;
            notification?: ReturnType<typeof Notification.prototype.toObject>;
        } = {};
        if (this.card != null) {
            data.card = this.card;
        }
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.send != null) {
            data.send = this.send.toObject();
        }
        if (this.notification != null) {
            data.notification = this.notification.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.card.length)
            writer.writeString(1, this.card);
        if (this.has_request)
            writer.writeMessage(2, this.request, () => this.request.serialize(writer));
        if (this.has_send)
            writer.writeMessage(3, this.send, () => this.send.serialize(writer));
        if (this.has_notification)
            writer.writeMessage(4, this.notification, () => this.notification.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KingSelection {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KingSelection();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.card = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.request, () => message.request = Request.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.send, () => message.send = Send.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.notification, () => message.notification = Notification.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): KingSelection {
        return KingSelection.deserialize(bytes);
    }
}
export class TalonSelection extends pb_1.Message {
    #one_of_decls: number[][] = [[2, 3, 4]];
    constructor(data?: any[] | ({
        part?: number;
    } & (({
        request?: Request;
        send?: never;
        notification?: never;
    } | {
        request?: never;
        send?: Send;
        notification?: never;
    } | {
        request?: never;
        send?: never;
        notification?: Notification;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("part" in data && data.part != undefined) {
                this.part = data.part;
            }
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("send" in data && data.send != undefined) {
                this.send = data.send;
            }
            if ("notification" in data && data.notification != undefined) {
                this.notification = data.notification;
            }
        }
    }
    get part() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set part(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get request() {
        return pb_1.Message.getWrapperField(this, Request, 2) as Request;
    }
    set request(value: Request) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_request() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get send() {
        return pb_1.Message.getWrapperField(this, Send, 3) as Send;
    }
    set send(value: Send) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_send() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get notification() {
        return pb_1.Message.getWrapperField(this, Notification, 4) as Notification;
    }
    set notification(value: Notification) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get has_notification() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get type() {
        const cases: {
            [index: number]: "none" | "request" | "send" | "notification";
        } = {
            0: "none",
            2: "request",
            3: "send",
            4: "notification"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4])];
    }
    static fromObject(data: {
        part?: number;
        request?: ReturnType<typeof Request.prototype.toObject>;
        send?: ReturnType<typeof Send.prototype.toObject>;
        notification?: ReturnType<typeof Notification.prototype.toObject>;
    }): TalonSelection {
        const message = new TalonSelection({});
        if (data.part != null) {
            message.part = data.part;
        }
        if (data.request != null) {
            message.request = Request.fromObject(data.request);
        }
        if (data.send != null) {
            message.send = Send.fromObject(data.send);
        }
        if (data.notification != null) {
            message.notification = Notification.fromObject(data.notification);
        }
        return message;
    }
    toObject() {
        const data: {
            part?: number;
            request?: ReturnType<typeof Request.prototype.toObject>;
            send?: ReturnType<typeof Send.prototype.toObject>;
            notification?: ReturnType<typeof Notification.prototype.toObject>;
        } = {};
        if (this.part != null) {
            data.part = this.part;
        }
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.send != null) {
            data.send = this.send.toObject();
        }
        if (this.notification != null) {
            data.notification = this.notification.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.part != 0)
            writer.writeInt32(1, this.part);
        if (this.has_request)
            writer.writeMessage(2, this.request, () => this.request.serialize(writer));
        if (this.has_send)
            writer.writeMessage(3, this.send, () => this.send.serialize(writer));
        if (this.has_notification)
            writer.writeMessage(4, this.notification, () => this.notification.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TalonSelection {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TalonSelection();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.part = reader.readInt32();
                    break;
                case 2:
                    reader.readMessage(message.request, () => message.request = Request.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.send, () => message.send = Send.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.notification, () => message.notification = Notification.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TalonSelection {
        return TalonSelection.deserialize(bytes);
    }
}
export class Stash extends pb_1.Message {
    #one_of_decls: number[][] = [[3, 4, 5]];
    constructor(data?: any[] | ({
        card?: Card[];
        length?: number;
    } & (({
        request?: Request;
        send?: never;
        notification?: never;
    } | {
        request?: never;
        send?: Send;
        notification?: never;
    } | {
        request?: never;
        send?: never;
        notification?: Notification;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("card" in data && data.card != undefined) {
                this.card = data.card;
            }
            if ("length" in data && data.length != undefined) {
                this.length = data.length;
            }
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("send" in data && data.send != undefined) {
                this.send = data.send;
            }
            if ("notification" in data && data.notification != undefined) {
                this.notification = data.notification;
            }
        }
    }
    get card() {
        return pb_1.Message.getRepeatedWrapperField(this, Card, 1) as Card[];
    }
    set card(value: Card[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get length() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set length(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get request() {
        return pb_1.Message.getWrapperField(this, Request, 3) as Request;
    }
    set request(value: Request) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_request() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get send() {
        return pb_1.Message.getWrapperField(this, Send, 4) as Send;
    }
    set send(value: Send) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get has_send() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get notification() {
        return pb_1.Message.getWrapperField(this, Notification, 5) as Notification;
    }
    set notification(value: Notification) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
    }
    get has_notification() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get type() {
        const cases: {
            [index: number]: "none" | "request" | "send" | "notification";
        } = {
            0: "none",
            3: "request",
            4: "send",
            5: "notification"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5])];
    }
    static fromObject(data: {
        card?: ReturnType<typeof Card.prototype.toObject>[];
        length?: number;
        request?: ReturnType<typeof Request.prototype.toObject>;
        send?: ReturnType<typeof Send.prototype.toObject>;
        notification?: ReturnType<typeof Notification.prototype.toObject>;
    }): Stash {
        const message = new Stash({});
        if (data.card != null) {
            message.card = data.card.map(item => Card.fromObject(item));
        }
        if (data.length != null) {
            message.length = data.length;
        }
        if (data.request != null) {
            message.request = Request.fromObject(data.request);
        }
        if (data.send != null) {
            message.send = Send.fromObject(data.send);
        }
        if (data.notification != null) {
            message.notification = Notification.fromObject(data.notification);
        }
        return message;
    }
    toObject() {
        const data: {
            card?: ReturnType<typeof Card.prototype.toObject>[];
            length?: number;
            request?: ReturnType<typeof Request.prototype.toObject>;
            send?: ReturnType<typeof Send.prototype.toObject>;
            notification?: ReturnType<typeof Notification.prototype.toObject>;
        } = {};
        if (this.card != null) {
            data.card = this.card.map((item: Card) => item.toObject());
        }
        if (this.length != null) {
            data.length = this.length;
        }
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.send != null) {
            data.send = this.send.toObject();
        }
        if (this.notification != null) {
            data.notification = this.notification.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.card.length)
            writer.writeRepeatedMessage(1, this.card, (item: Card) => item.serialize(writer));
        if (this.length != 0)
            writer.writeInt32(2, this.length);
        if (this.has_request)
            writer.writeMessage(3, this.request, () => this.request.serialize(writer));
        if (this.has_send)
            writer.writeMessage(4, this.send, () => this.send.serialize(writer));
        if (this.has_notification)
            writer.writeMessage(5, this.notification, () => this.notification.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Stash {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Stash();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.card, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Card.deserialize(reader), Card));
                    break;
                case 2:
                    message.length = reader.readInt32();
                    break;
                case 3:
                    reader.readMessage(message.request, () => message.request = Request.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.send, () => message.send = Send.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.notification, () => message.notification = Notification.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Stash {
        return Stash.deserialize(bytes);
    }
}
export class Radelci extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        radleci?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("radleci" in data && data.radleci != undefined) {
                this.radleci = data.radleci;
            }
        }
    }
    get radleci() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set radleci(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        radleci?: number;
    }): Radelci {
        const message = new Radelci({});
        if (data.radleci != null) {
            message.radleci = data.radleci;
        }
        return message;
    }
    toObject() {
        const data: {
            radleci?: number;
        } = {};
        if (this.radleci != null) {
            data.radleci = this.radleci;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.radleci != 0)
            writer.writeInt32(1, this.radleci);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Radelci {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Radelci();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.radleci = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Radelci {
        return Radelci.deserialize(bytes);
    }
}
export class StartPredictions extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        kralj_ultimo_kontra?: boolean;
        pagat_ultimo_kontra?: boolean;
        igra_kontra?: boolean;
        valat_kontra?: boolean;
        barvni_valat_kontra?: boolean;
        pagat_ultimo?: boolean;
        trula?: boolean;
        kralji?: boolean;
        kralj_ultimo?: boolean;
        valat?: boolean;
        barvni_valat?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("kralj_ultimo_kontra" in data && data.kralj_ultimo_kontra != undefined) {
                this.kralj_ultimo_kontra = data.kralj_ultimo_kontra;
            }
            if ("pagat_ultimo_kontra" in data && data.pagat_ultimo_kontra != undefined) {
                this.pagat_ultimo_kontra = data.pagat_ultimo_kontra;
            }
            if ("igra_kontra" in data && data.igra_kontra != undefined) {
                this.igra_kontra = data.igra_kontra;
            }
            if ("valat_kontra" in data && data.valat_kontra != undefined) {
                this.valat_kontra = data.valat_kontra;
            }
            if ("barvni_valat_kontra" in data && data.barvni_valat_kontra != undefined) {
                this.barvni_valat_kontra = data.barvni_valat_kontra;
            }
            if ("pagat_ultimo" in data && data.pagat_ultimo != undefined) {
                this.pagat_ultimo = data.pagat_ultimo;
            }
            if ("trula" in data && data.trula != undefined) {
                this.trula = data.trula;
            }
            if ("kralji" in data && data.kralji != undefined) {
                this.kralji = data.kralji;
            }
            if ("kralj_ultimo" in data && data.kralj_ultimo != undefined) {
                this.kralj_ultimo = data.kralj_ultimo;
            }
            if ("valat" in data && data.valat != undefined) {
                this.valat = data.valat;
            }
            if ("barvni_valat" in data && data.barvni_valat != undefined) {
                this.barvni_valat = data.barvni_valat;
            }
        }
    }
    get kralj_ultimo_kontra() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set kralj_ultimo_kontra(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    get pagat_ultimo_kontra() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set pagat_ultimo_kontra(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    get igra_kontra() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set igra_kontra(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get valat_kontra() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set valat_kontra(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    get barvni_valat_kontra() {
        return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
    }
    set barvni_valat_kontra(value: boolean) {
        pb_1.Message.setField(this, 7, value);
    }
    get pagat_ultimo() {
        return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
    }
    set pagat_ultimo(value: boolean) {
        pb_1.Message.setField(this, 8, value);
    }
    get trula() {
        return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
    }
    set trula(value: boolean) {
        pb_1.Message.setField(this, 9, value);
    }
    get kralji() {
        return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
    }
    set kralji(value: boolean) {
        pb_1.Message.setField(this, 10, value);
    }
    get kralj_ultimo() {
        return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
    }
    set kralj_ultimo(value: boolean) {
        pb_1.Message.setField(this, 11, value);
    }
    get valat() {
        return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
    }
    set valat(value: boolean) {
        pb_1.Message.setField(this, 12, value);
    }
    get barvni_valat() {
        return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
    }
    set barvni_valat(value: boolean) {
        pb_1.Message.setField(this, 13, value);
    }
    static fromObject(data: {
        kralj_ultimo_kontra?: boolean;
        pagat_ultimo_kontra?: boolean;
        igra_kontra?: boolean;
        valat_kontra?: boolean;
        barvni_valat_kontra?: boolean;
        pagat_ultimo?: boolean;
        trula?: boolean;
        kralji?: boolean;
        kralj_ultimo?: boolean;
        valat?: boolean;
        barvni_valat?: boolean;
    }): StartPredictions {
        const message = new StartPredictions({});
        if (data.kralj_ultimo_kontra != null) {
            message.kralj_ultimo_kontra = data.kralj_ultimo_kontra;
        }
        if (data.pagat_ultimo_kontra != null) {
            message.pagat_ultimo_kontra = data.pagat_ultimo_kontra;
        }
        if (data.igra_kontra != null) {
            message.igra_kontra = data.igra_kontra;
        }
        if (data.valat_kontra != null) {
            message.valat_kontra = data.valat_kontra;
        }
        if (data.barvni_valat_kontra != null) {
            message.barvni_valat_kontra = data.barvni_valat_kontra;
        }
        if (data.pagat_ultimo != null) {
            message.pagat_ultimo = data.pagat_ultimo;
        }
        if (data.trula != null) {
            message.trula = data.trula;
        }
        if (data.kralji != null) {
            message.kralji = data.kralji;
        }
        if (data.kralj_ultimo != null) {
            message.kralj_ultimo = data.kralj_ultimo;
        }
        if (data.valat != null) {
            message.valat = data.valat;
        }
        if (data.barvni_valat != null) {
            message.barvni_valat = data.barvni_valat;
        }
        return message;
    }
    toObject() {
        const data: {
            kralj_ultimo_kontra?: boolean;
            pagat_ultimo_kontra?: boolean;
            igra_kontra?: boolean;
            valat_kontra?: boolean;
            barvni_valat_kontra?: boolean;
            pagat_ultimo?: boolean;
            trula?: boolean;
            kralji?: boolean;
            kralj_ultimo?: boolean;
            valat?: boolean;
            barvni_valat?: boolean;
        } = {};
        if (this.kralj_ultimo_kontra != null) {
            data.kralj_ultimo_kontra = this.kralj_ultimo_kontra;
        }
        if (this.pagat_ultimo_kontra != null) {
            data.pagat_ultimo_kontra = this.pagat_ultimo_kontra;
        }
        if (this.igra_kontra != null) {
            data.igra_kontra = this.igra_kontra;
        }
        if (this.valat_kontra != null) {
            data.valat_kontra = this.valat_kontra;
        }
        if (this.barvni_valat_kontra != null) {
            data.barvni_valat_kontra = this.barvni_valat_kontra;
        }
        if (this.pagat_ultimo != null) {
            data.pagat_ultimo = this.pagat_ultimo;
        }
        if (this.trula != null) {
            data.trula = this.trula;
        }
        if (this.kralji != null) {
            data.kralji = this.kralji;
        }
        if (this.kralj_ultimo != null) {
            data.kralj_ultimo = this.kralj_ultimo;
        }
        if (this.valat != null) {
            data.valat = this.valat;
        }
        if (this.barvni_valat != null) {
            data.barvni_valat = this.barvni_valat;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.kralj_ultimo_kontra != false)
            writer.writeBool(1, this.kralj_ultimo_kontra);
        if (this.pagat_ultimo_kontra != false)
            writer.writeBool(4, this.pagat_ultimo_kontra);
        if (this.igra_kontra != false)
            writer.writeBool(5, this.igra_kontra);
        if (this.valat_kontra != false)
            writer.writeBool(6, this.valat_kontra);
        if (this.barvni_valat_kontra != false)
            writer.writeBool(7, this.barvni_valat_kontra);
        if (this.pagat_ultimo != false)
            writer.writeBool(8, this.pagat_ultimo);
        if (this.trula != false)
            writer.writeBool(9, this.trula);
        if (this.kralji != false)
            writer.writeBool(10, this.kralji);
        if (this.kralj_ultimo != false)
            writer.writeBool(11, this.kralj_ultimo);
        if (this.valat != false)
            writer.writeBool(12, this.valat);
        if (this.barvni_valat != false)
            writer.writeBool(13, this.barvni_valat);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StartPredictions {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StartPredictions();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.kralj_ultimo_kontra = reader.readBool();
                    break;
                case 4:
                    message.pagat_ultimo_kontra = reader.readBool();
                    break;
                case 5:
                    message.igra_kontra = reader.readBool();
                    break;
                case 6:
                    message.valat_kontra = reader.readBool();
                    break;
                case 7:
                    message.barvni_valat_kontra = reader.readBool();
                    break;
                case 8:
                    message.pagat_ultimo = reader.readBool();
                    break;
                case 9:
                    message.trula = reader.readBool();
                    break;
                case 10:
                    message.kralji = reader.readBool();
                    break;
                case 11:
                    message.kralj_ultimo = reader.readBool();
                    break;
                case 12:
                    message.valat = reader.readBool();
                    break;
                case 13:
                    message.barvni_valat = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StartPredictions {
        return StartPredictions.deserialize(bytes);
    }
}
export class Predictions extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        kralj_ultimo?: User;
        kralj_ultimo_kontra?: number;
        kralj_ultimo_kontra_dal?: User;
        trula?: User;
        kralji?: User;
        pagat_ultimo?: User;
        pagat_ultimo_kontra?: number;
        pagat_ultimo_kontra_dal?: User;
        igra?: User;
        igra_kontra?: number;
        igra_kontra_dal?: User;
        valat?: User;
        valat_kontra?: number;
        valat_kontra_dal?: User;
        barvni_valat?: User;
        barvni_valat_kontra?: number;
        barvni_valat_kontra_dal?: User;
        gamemode?: number;
        changed?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("kralj_ultimo" in data && data.kralj_ultimo != undefined) {
                this.kralj_ultimo = data.kralj_ultimo;
            }
            if ("kralj_ultimo_kontra" in data && data.kralj_ultimo_kontra != undefined) {
                this.kralj_ultimo_kontra = data.kralj_ultimo_kontra;
            }
            if ("kralj_ultimo_kontra_dal" in data && data.kralj_ultimo_kontra_dal != undefined) {
                this.kralj_ultimo_kontra_dal = data.kralj_ultimo_kontra_dal;
            }
            if ("trula" in data && data.trula != undefined) {
                this.trula = data.trula;
            }
            if ("kralji" in data && data.kralji != undefined) {
                this.kralji = data.kralji;
            }
            if ("pagat_ultimo" in data && data.pagat_ultimo != undefined) {
                this.pagat_ultimo = data.pagat_ultimo;
            }
            if ("pagat_ultimo_kontra" in data && data.pagat_ultimo_kontra != undefined) {
                this.pagat_ultimo_kontra = data.pagat_ultimo_kontra;
            }
            if ("pagat_ultimo_kontra_dal" in data && data.pagat_ultimo_kontra_dal != undefined) {
                this.pagat_ultimo_kontra_dal = data.pagat_ultimo_kontra_dal;
            }
            if ("igra" in data && data.igra != undefined) {
                this.igra = data.igra;
            }
            if ("igra_kontra" in data && data.igra_kontra != undefined) {
                this.igra_kontra = data.igra_kontra;
            }
            if ("igra_kontra_dal" in data && data.igra_kontra_dal != undefined) {
                this.igra_kontra_dal = data.igra_kontra_dal;
            }
            if ("valat" in data && data.valat != undefined) {
                this.valat = data.valat;
            }
            if ("valat_kontra" in data && data.valat_kontra != undefined) {
                this.valat_kontra = data.valat_kontra;
            }
            if ("valat_kontra_dal" in data && data.valat_kontra_dal != undefined) {
                this.valat_kontra_dal = data.valat_kontra_dal;
            }
            if ("barvni_valat" in data && data.barvni_valat != undefined) {
                this.barvni_valat = data.barvni_valat;
            }
            if ("barvni_valat_kontra" in data && data.barvni_valat_kontra != undefined) {
                this.barvni_valat_kontra = data.barvni_valat_kontra;
            }
            if ("barvni_valat_kontra_dal" in data && data.barvni_valat_kontra_dal != undefined) {
                this.barvni_valat_kontra_dal = data.barvni_valat_kontra_dal;
            }
            if ("gamemode" in data && data.gamemode != undefined) {
                this.gamemode = data.gamemode;
            }
            if ("changed" in data && data.changed != undefined) {
                this.changed = data.changed;
            }
        }
    }
    get kralj_ultimo() {
        return pb_1.Message.getWrapperField(this, User, 1) as User;
    }
    set kralj_ultimo(value: User) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_kralj_ultimo() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get kralj_ultimo_kontra() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set kralj_ultimo_kontra(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get kralj_ultimo_kontra_dal() {
        return pb_1.Message.getWrapperField(this, User, 3) as User;
    }
    set kralj_ultimo_kontra_dal(value: User) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_kralj_ultimo_kontra_dal() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get trula() {
        return pb_1.Message.getWrapperField(this, User, 4) as User;
    }
    set trula(value: User) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_trula() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get kralji() {
        return pb_1.Message.getWrapperField(this, User, 7) as User;
    }
    set kralji(value: User) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get has_kralji() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get pagat_ultimo() {
        return pb_1.Message.getWrapperField(this, User, 10) as User;
    }
    set pagat_ultimo(value: User) {
        pb_1.Message.setWrapperField(this, 10, value);
    }
    get has_pagat_ultimo() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get pagat_ultimo_kontra() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set pagat_ultimo_kontra(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get pagat_ultimo_kontra_dal() {
        return pb_1.Message.getWrapperField(this, User, 12) as User;
    }
    set pagat_ultimo_kontra_dal(value: User) {
        pb_1.Message.setWrapperField(this, 12, value);
    }
    get has_pagat_ultimo_kontra_dal() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get igra() {
        return pb_1.Message.getWrapperField(this, User, 13) as User;
    }
    set igra(value: User) {
        pb_1.Message.setWrapperField(this, 13, value);
    }
    get has_igra() {
        return pb_1.Message.getField(this, 13) != null;
    }
    get igra_kontra() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set igra_kontra(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get igra_kontra_dal() {
        return pb_1.Message.getWrapperField(this, User, 15) as User;
    }
    set igra_kontra_dal(value: User) {
        pb_1.Message.setWrapperField(this, 15, value);
    }
    get has_igra_kontra_dal() {
        return pb_1.Message.getField(this, 15) != null;
    }
    get valat() {
        return pb_1.Message.getWrapperField(this, User, 16) as User;
    }
    set valat(value: User) {
        pb_1.Message.setWrapperField(this, 16, value);
    }
    get has_valat() {
        return pb_1.Message.getField(this, 16) != null;
    }
    get valat_kontra() {
        return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
    }
    set valat_kontra(value: number) {
        pb_1.Message.setField(this, 17, value);
    }
    get valat_kontra_dal() {
        return pb_1.Message.getWrapperField(this, User, 18) as User;
    }
    set valat_kontra_dal(value: User) {
        pb_1.Message.setWrapperField(this, 18, value);
    }
    get has_valat_kontra_dal() {
        return pb_1.Message.getField(this, 18) != null;
    }
    get barvni_valat() {
        return pb_1.Message.getWrapperField(this, User, 19) as User;
    }
    set barvni_valat(value: User) {
        pb_1.Message.setWrapperField(this, 19, value);
    }
    get has_barvni_valat() {
        return pb_1.Message.getField(this, 19) != null;
    }
    get barvni_valat_kontra() {
        return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
    }
    set barvni_valat_kontra(value: number) {
        pb_1.Message.setField(this, 20, value);
    }
    get barvni_valat_kontra_dal() {
        return pb_1.Message.getWrapperField(this, User, 21) as User;
    }
    set barvni_valat_kontra_dal(value: User) {
        pb_1.Message.setWrapperField(this, 21, value);
    }
    get has_barvni_valat_kontra_dal() {
        return pb_1.Message.getField(this, 21) != null;
    }
    get gamemode() {
        return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
    }
    set gamemode(value: number) {
        pb_1.Message.setField(this, 22, value);
    }
    get changed() {
        return pb_1.Message.getFieldWithDefault(this, 23, false) as boolean;
    }
    set changed(value: boolean) {
        pb_1.Message.setField(this, 23, value);
    }
    static fromObject(data: {
        kralj_ultimo?: ReturnType<typeof User.prototype.toObject>;
        kralj_ultimo_kontra?: number;
        kralj_ultimo_kontra_dal?: ReturnType<typeof User.prototype.toObject>;
        trula?: ReturnType<typeof User.prototype.toObject>;
        kralji?: ReturnType<typeof User.prototype.toObject>;
        pagat_ultimo?: ReturnType<typeof User.prototype.toObject>;
        pagat_ultimo_kontra?: number;
        pagat_ultimo_kontra_dal?: ReturnType<typeof User.prototype.toObject>;
        igra?: ReturnType<typeof User.prototype.toObject>;
        igra_kontra?: number;
        igra_kontra_dal?: ReturnType<typeof User.prototype.toObject>;
        valat?: ReturnType<typeof User.prototype.toObject>;
        valat_kontra?: number;
        valat_kontra_dal?: ReturnType<typeof User.prototype.toObject>;
        barvni_valat?: ReturnType<typeof User.prototype.toObject>;
        barvni_valat_kontra?: number;
        barvni_valat_kontra_dal?: ReturnType<typeof User.prototype.toObject>;
        gamemode?: number;
        changed?: boolean;
    }): Predictions {
        const message = new Predictions({});
        if (data.kralj_ultimo != null) {
            message.kralj_ultimo = User.fromObject(data.kralj_ultimo);
        }
        if (data.kralj_ultimo_kontra != null) {
            message.kralj_ultimo_kontra = data.kralj_ultimo_kontra;
        }
        if (data.kralj_ultimo_kontra_dal != null) {
            message.kralj_ultimo_kontra_dal = User.fromObject(data.kralj_ultimo_kontra_dal);
        }
        if (data.trula != null) {
            message.trula = User.fromObject(data.trula);
        }
        if (data.kralji != null) {
            message.kralji = User.fromObject(data.kralji);
        }
        if (data.pagat_ultimo != null) {
            message.pagat_ultimo = User.fromObject(data.pagat_ultimo);
        }
        if (data.pagat_ultimo_kontra != null) {
            message.pagat_ultimo_kontra = data.pagat_ultimo_kontra;
        }
        if (data.pagat_ultimo_kontra_dal != null) {
            message.pagat_ultimo_kontra_dal = User.fromObject(data.pagat_ultimo_kontra_dal);
        }
        if (data.igra != null) {
            message.igra = User.fromObject(data.igra);
        }
        if (data.igra_kontra != null) {
            message.igra_kontra = data.igra_kontra;
        }
        if (data.igra_kontra_dal != null) {
            message.igra_kontra_dal = User.fromObject(data.igra_kontra_dal);
        }
        if (data.valat != null) {
            message.valat = User.fromObject(data.valat);
        }
        if (data.valat_kontra != null) {
            message.valat_kontra = data.valat_kontra;
        }
        if (data.valat_kontra_dal != null) {
            message.valat_kontra_dal = User.fromObject(data.valat_kontra_dal);
        }
        if (data.barvni_valat != null) {
            message.barvni_valat = User.fromObject(data.barvni_valat);
        }
        if (data.barvni_valat_kontra != null) {
            message.barvni_valat_kontra = data.barvni_valat_kontra;
        }
        if (data.barvni_valat_kontra_dal != null) {
            message.barvni_valat_kontra_dal = User.fromObject(data.barvni_valat_kontra_dal);
        }
        if (data.gamemode != null) {
            message.gamemode = data.gamemode;
        }
        if (data.changed != null) {
            message.changed = data.changed;
        }
        return message;
    }
    toObject() {
        const data: {
            kralj_ultimo?: ReturnType<typeof User.prototype.toObject>;
            kralj_ultimo_kontra?: number;
            kralj_ultimo_kontra_dal?: ReturnType<typeof User.prototype.toObject>;
            trula?: ReturnType<typeof User.prototype.toObject>;
            kralji?: ReturnType<typeof User.prototype.toObject>;
            pagat_ultimo?: ReturnType<typeof User.prototype.toObject>;
            pagat_ultimo_kontra?: number;
            pagat_ultimo_kontra_dal?: ReturnType<typeof User.prototype.toObject>;
            igra?: ReturnType<typeof User.prototype.toObject>;
            igra_kontra?: number;
            igra_kontra_dal?: ReturnType<typeof User.prototype.toObject>;
            valat?: ReturnType<typeof User.prototype.toObject>;
            valat_kontra?: number;
            valat_kontra_dal?: ReturnType<typeof User.prototype.toObject>;
            barvni_valat?: ReturnType<typeof User.prototype.toObject>;
            barvni_valat_kontra?: number;
            barvni_valat_kontra_dal?: ReturnType<typeof User.prototype.toObject>;
            gamemode?: number;
            changed?: boolean;
        } = {};
        if (this.kralj_ultimo != null) {
            data.kralj_ultimo = this.kralj_ultimo.toObject();
        }
        if (this.kralj_ultimo_kontra != null) {
            data.kralj_ultimo_kontra = this.kralj_ultimo_kontra;
        }
        if (this.kralj_ultimo_kontra_dal != null) {
            data.kralj_ultimo_kontra_dal = this.kralj_ultimo_kontra_dal.toObject();
        }
        if (this.trula != null) {
            data.trula = this.trula.toObject();
        }
        if (this.kralji != null) {
            data.kralji = this.kralji.toObject();
        }
        if (this.pagat_ultimo != null) {
            data.pagat_ultimo = this.pagat_ultimo.toObject();
        }
        if (this.pagat_ultimo_kontra != null) {
            data.pagat_ultimo_kontra = this.pagat_ultimo_kontra;
        }
        if (this.pagat_ultimo_kontra_dal != null) {
            data.pagat_ultimo_kontra_dal = this.pagat_ultimo_kontra_dal.toObject();
        }
        if (this.igra != null) {
            data.igra = this.igra.toObject();
        }
        if (this.igra_kontra != null) {
            data.igra_kontra = this.igra_kontra;
        }
        if (this.igra_kontra_dal != null) {
            data.igra_kontra_dal = this.igra_kontra_dal.toObject();
        }
        if (this.valat != null) {
            data.valat = this.valat.toObject();
        }
        if (this.valat_kontra != null) {
            data.valat_kontra = this.valat_kontra;
        }
        if (this.valat_kontra_dal != null) {
            data.valat_kontra_dal = this.valat_kontra_dal.toObject();
        }
        if (this.barvni_valat != null) {
            data.barvni_valat = this.barvni_valat.toObject();
        }
        if (this.barvni_valat_kontra != null) {
            data.barvni_valat_kontra = this.barvni_valat_kontra;
        }
        if (this.barvni_valat_kontra_dal != null) {
            data.barvni_valat_kontra_dal = this.barvni_valat_kontra_dal.toObject();
        }
        if (this.gamemode != null) {
            data.gamemode = this.gamemode;
        }
        if (this.changed != null) {
            data.changed = this.changed;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_kralj_ultimo)
            writer.writeMessage(1, this.kralj_ultimo, () => this.kralj_ultimo.serialize(writer));
        if (this.kralj_ultimo_kontra != 0)
            writer.writeInt32(2, this.kralj_ultimo_kontra);
        if (this.has_kralj_ultimo_kontra_dal)
            writer.writeMessage(3, this.kralj_ultimo_kontra_dal, () => this.kralj_ultimo_kontra_dal.serialize(writer));
        if (this.has_trula)
            writer.writeMessage(4, this.trula, () => this.trula.serialize(writer));
        if (this.has_kralji)
            writer.writeMessage(7, this.kralji, () => this.kralji.serialize(writer));
        if (this.has_pagat_ultimo)
            writer.writeMessage(10, this.pagat_ultimo, () => this.pagat_ultimo.serialize(writer));
        if (this.pagat_ultimo_kontra != 0)
            writer.writeInt32(11, this.pagat_ultimo_kontra);
        if (this.has_pagat_ultimo_kontra_dal)
            writer.writeMessage(12, this.pagat_ultimo_kontra_dal, () => this.pagat_ultimo_kontra_dal.serialize(writer));
        if (this.has_igra)
            writer.writeMessage(13, this.igra, () => this.igra.serialize(writer));
        if (this.igra_kontra != 0)
            writer.writeInt32(14, this.igra_kontra);
        if (this.has_igra_kontra_dal)
            writer.writeMessage(15, this.igra_kontra_dal, () => this.igra_kontra_dal.serialize(writer));
        if (this.has_valat)
            writer.writeMessage(16, this.valat, () => this.valat.serialize(writer));
        if (this.valat_kontra != 0)
            writer.writeInt32(17, this.valat_kontra);
        if (this.has_valat_kontra_dal)
            writer.writeMessage(18, this.valat_kontra_dal, () => this.valat_kontra_dal.serialize(writer));
        if (this.has_barvni_valat)
            writer.writeMessage(19, this.barvni_valat, () => this.barvni_valat.serialize(writer));
        if (this.barvni_valat_kontra != 0)
            writer.writeInt32(20, this.barvni_valat_kontra);
        if (this.has_barvni_valat_kontra_dal)
            writer.writeMessage(21, this.barvni_valat_kontra_dal, () => this.barvni_valat_kontra_dal.serialize(writer));
        if (this.gamemode != 0)
            writer.writeInt32(22, this.gamemode);
        if (this.changed != false)
            writer.writeBool(23, this.changed);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Predictions {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Predictions();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.kralj_ultimo, () => message.kralj_ultimo = User.deserialize(reader));
                    break;
                case 2:
                    message.kralj_ultimo_kontra = reader.readInt32();
                    break;
                case 3:
                    reader.readMessage(message.kralj_ultimo_kontra_dal, () => message.kralj_ultimo_kontra_dal = User.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.trula, () => message.trula = User.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.kralji, () => message.kralji = User.deserialize(reader));
                    break;
                case 10:
                    reader.readMessage(message.pagat_ultimo, () => message.pagat_ultimo = User.deserialize(reader));
                    break;
                case 11:
                    message.pagat_ultimo_kontra = reader.readInt32();
                    break;
                case 12:
                    reader.readMessage(message.pagat_ultimo_kontra_dal, () => message.pagat_ultimo_kontra_dal = User.deserialize(reader));
                    break;
                case 13:
                    reader.readMessage(message.igra, () => message.igra = User.deserialize(reader));
                    break;
                case 14:
                    message.igra_kontra = reader.readInt32();
                    break;
                case 15:
                    reader.readMessage(message.igra_kontra_dal, () => message.igra_kontra_dal = User.deserialize(reader));
                    break;
                case 16:
                    reader.readMessage(message.valat, () => message.valat = User.deserialize(reader));
                    break;
                case 17:
                    message.valat_kontra = reader.readInt32();
                    break;
                case 18:
                    reader.readMessage(message.valat_kontra_dal, () => message.valat_kontra_dal = User.deserialize(reader));
                    break;
                case 19:
                    reader.readMessage(message.barvni_valat, () => message.barvni_valat = User.deserialize(reader));
                    break;
                case 20:
                    message.barvni_valat_kontra = reader.readInt32();
                    break;
                case 21:
                    reader.readMessage(message.barvni_valat_kontra_dal, () => message.barvni_valat_kontra_dal = User.deserialize(reader));
                    break;
                case 22:
                    message.gamemode = reader.readInt32();
                    break;
                case 23:
                    message.changed = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Predictions {
        return Predictions.deserialize(bytes);
    }
}
export class TalonReveal extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        stih?: Stih[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("stih" in data && data.stih != undefined) {
                this.stih = data.stih;
            }
        }
    }
    get stih() {
        return pb_1.Message.getRepeatedWrapperField(this, Stih, 1) as Stih[];
    }
    set stih(value: Stih[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        stih?: ReturnType<typeof Stih.prototype.toObject>[];
    }): TalonReveal {
        const message = new TalonReveal({});
        if (data.stih != null) {
            message.stih = data.stih.map(item => Stih.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            stih?: ReturnType<typeof Stih.prototype.toObject>[];
        } = {};
        if (this.stih != null) {
            data.stih = this.stih.map((item: Stih) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.stih.length)
            writer.writeRepeatedMessage(1, this.stih, (item: Stih) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TalonReveal {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TalonReveal();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.stih, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Stih.deserialize(reader), Stih));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TalonReveal {
        return TalonReveal.deserialize(bytes);
    }
}
export class PlayingReveal extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        playing?: User;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("playing" in data && data.playing != undefined) {
                this.playing = data.playing;
            }
        }
    }
    get playing() {
        return pb_1.Message.getWrapperField(this, User, 1) as User;
    }
    set playing(value: User) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_playing() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        playing?: ReturnType<typeof User.prototype.toObject>;
    }): PlayingReveal {
        const message = new PlayingReveal({});
        if (data.playing != null) {
            message.playing = User.fromObject(data.playing);
        }
        return message;
    }
    toObject() {
        const data: {
            playing?: ReturnType<typeof User.prototype.toObject>;
        } = {};
        if (this.playing != null) {
            data.playing = this.playing.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_playing)
            writer.writeMessage(1, this.playing, () => this.playing.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayingReveal {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayingReveal();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.playing, () => message.playing = User.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PlayingReveal {
        return PlayingReveal.deserialize(bytes);
    }
}
export class LoginRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): LoginRequest {
        const message = new LoginRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LoginRequest {
        return LoginRequest.deserialize(bytes);
    }
}
export class LoginInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
        }
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        token?: string;
    }): LoginInfo {
        const message = new LoginInfo({});
        if (data.token != null) {
            message.token = data.token;
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LoginInfo {
        return LoginInfo.deserialize(bytes);
    }
}
export class LoginResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        ok?: LoginResponse.OK;
        fail?: never;
    } | {
        ok?: never;
        fail?: LoginResponse.Fail;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ok" in data && data.ok != undefined) {
                this.ok = data.ok;
            }
            if ("fail" in data && data.fail != undefined) {
                this.fail = data.fail;
            }
        }
    }
    get ok() {
        return pb_1.Message.getWrapperField(this, LoginResponse.OK, 1) as LoginResponse.OK;
    }
    set ok(value: LoginResponse.OK) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_ok() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get fail() {
        return pb_1.Message.getWrapperField(this, LoginResponse.Fail, 2) as LoginResponse.Fail;
    }
    set fail(value: LoginResponse.Fail) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_fail() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get type() {
        const cases: {
            [index: number]: "none" | "ok" | "fail";
        } = {
            0: "none",
            1: "ok",
            2: "fail"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        ok?: ReturnType<typeof LoginResponse.OK.prototype.toObject>;
        fail?: ReturnType<typeof LoginResponse.Fail.prototype.toObject>;
    }): LoginResponse {
        const message = new LoginResponse({});
        if (data.ok != null) {
            message.ok = LoginResponse.OK.fromObject(data.ok);
        }
        if (data.fail != null) {
            message.fail = LoginResponse.Fail.fromObject(data.fail);
        }
        return message;
    }
    toObject() {
        const data: {
            ok?: ReturnType<typeof LoginResponse.OK.prototype.toObject>;
            fail?: ReturnType<typeof LoginResponse.Fail.prototype.toObject>;
        } = {};
        if (this.ok != null) {
            data.ok = this.ok.toObject();
        }
        if (this.fail != null) {
            data.fail = this.fail.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_ok)
            writer.writeMessage(1, this.ok, () => this.ok.serialize(writer));
        if (this.has_fail)
            writer.writeMessage(2, this.fail, () => this.fail.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.ok, () => message.ok = LoginResponse.OK.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.fail, () => message.fail = LoginResponse.Fail.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LoginResponse {
        return LoginResponse.deserialize(bytes);
    }
}
export namespace LoginResponse {
    export class OK extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): OK {
            const message = new OK({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OK {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OK();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OK {
            return OK.deserialize(bytes);
        }
    }
    export class Fail extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Fail {
            const message = new Fail({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Fail {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Fail();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Fail {
            return Fail.deserialize(bytes);
        }
    }
}
export class InvitePlayer extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): InvitePlayer {
        const message = new InvitePlayer({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvitePlayer {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvitePlayer();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InvitePlayer {
        return InvitePlayer.deserialize(bytes);
    }
}
export class Time extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        currentTime?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("currentTime" in data && data.currentTime != undefined) {
                this.currentTime = data.currentTime;
            }
        }
    }
    get currentTime() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set currentTime(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        currentTime?: number;
    }): Time {
        const message = new Time({});
        if (data.currentTime != null) {
            message.currentTime = data.currentTime;
        }
        return message;
    }
    toObject() {
        const data: {
            currentTime?: number;
        } = {};
        if (this.currentTime != null) {
            data.currentTime = this.currentTime;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.currentTime != 0)
            writer.writeFloat(1, this.currentTime);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Time {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Time();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.currentTime = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Time {
        return Time.deserialize(bytes);
    }
}
export class ChatMessage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user_id?: string;
        message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        user_id?: string;
        message?: string;
    }): ChatMessage {
        const message = new ChatMessage({});
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        return message;
    }
    toObject() {
        const data: {
            user_id?: string;
            message?: string;
        } = {};
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user_id.length)
            writer.writeString(1, this.user_id);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user_id = reader.readString();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChatMessage {
        return ChatMessage.deserialize(bytes);
    }
}
export class Message extends pb_1.Message {
    #one_of_decls: number[][] = [[4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]];
    constructor(data?: any[] | ({
        username?: string;
        player_id?: string;
        game_id?: string;
    } & (({
        connection?: Connection;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
        talon_reveal?: never;
        playing_reveal?: never;
        talon_selection?: never;
        stash?: never;
        game_end?: never;
        game_start_countdown?: never;
        predictions_resend?: never;
        radelci?: never;
        time?: never;
        chat_message?: never;
        invite_player?: never;
    } | {
        connection?: never;
        licitiranje?: Licitiranje;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
        talon_reveal?: never;
        playing_reveal?: never;
        talon_selection?: never;
        stash?: never;
        game_end?: never;
        game_start_countdown?: never;
        predictions_resend?: never;
        radelci?: never;
        time?: never;
        chat_message?: never;
        invite_player?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: Card;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
        talon_reveal?: never;
        playing_reveal?: never;
        talon_selection?: never;
        stash?: never;
        game_end?: never;
        game_start_countdown?: never;
        predictions_resend?: never;
        radelci?: never;
        time?: never;
        chat_message?: never;
        invite_player?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: LicitiranjeStart;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
        talon_reveal?: never;
        playing_reveal?: never;
        talon_selection?: never;
        stash?: never;
        game_end?: never;
        game_start_countdown?: never;
        predictions_resend?: never;
        radelci?: never;
        time?: never;
        chat_message?: never;
        invite_player?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: GameStart;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
        talon_reveal?: never;
        playing_reveal?: never;
        talon_selection?: never;
        stash?: never;
        game_end?: never;
        game_start_countdown?: never;
        predictions_resend?: never;
        radelci?: never;
        time?: never;
        chat_message?: never;
        invite_player?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: LoginRequest;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
        talon_reveal?: never;
        playing_reveal?: never;
        talon_selection?: never;
        stash?: never;
        game_end?: never;
        game_start_countdown?: never;
        predictions_resend?: never;
        radelci?: never;
        time?: never;
        chat_message?: never;
        invite_player?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: LoginInfo;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
        talon_reveal?: never;
        playing_reveal?: never;
        talon_selection?: never;
        stash?: never;
        game_end?: never;
        game_start_countdown?: never;
        predictions_resend?: never;
        radelci?: never;
        time?: never;
        chat_message?: never;
        invite_player?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: LoginResponse;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
        talon_reveal?: never;
        playing_reveal?: never;
        talon_selection?: never;
        stash?: never;
        game_end?: never;
        game_start_countdown?: never;
        predictions_resend?: never;
        radelci?: never;
        time?: never;
        chat_message?: never;
        invite_player?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: ClearDesk;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
        talon_reveal?: never;
        playing_reveal?: never;
        talon_selection?: never;
        stash?: never;
        game_end?: never;
        game_start_countdown?: never;
        predictions_resend?: never;
        radelci?: never;
        time?: never;
        chat_message?: never;
        invite_player?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: Results;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
        talon_reveal?: never;
        playing_reveal?: never;
        talon_selection?: never;
        stash?: never;
        game_end?: never;
        game_start_countdown?: never;
        predictions_resend?: never;
        radelci?: never;
        time?: never;
        chat_message?: never;
        invite_player?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: UserList;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
        talon_reveal?: never;
        playing_reveal?: never;
        talon_selection?: never;
        stash?: never;
        game_end?: never;
        game_start_countdown?: never;
        predictions_resend?: never;
        radelci?: never;
        time?: never;
        chat_message?: never;
        invite_player?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: KingSelection;
        start_predictions?: never;
        predictions?: never;
        talon_reveal?: never;
        playing_reveal?: never;
        talon_selection?: never;
        stash?: never;
        game_end?: never;
        game_start_countdown?: never;
        predictions_resend?: never;
        radelci?: never;
        time?: never;
        chat_message?: never;
        invite_player?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: StartPredictions;
        predictions?: never;
        talon_reveal?: never;
        playing_reveal?: never;
        talon_selection?: never;
        stash?: never;
        game_end?: never;
        game_start_countdown?: never;
        predictions_resend?: never;
        radelci?: never;
        time?: never;
        chat_message?: never;
        invite_player?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: Predictions;
        talon_reveal?: never;
        playing_reveal?: never;
        talon_selection?: never;
        stash?: never;
        game_end?: never;
        game_start_countdown?: never;
        predictions_resend?: never;
        radelci?: never;
        time?: never;
        chat_message?: never;
        invite_player?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
        talon_reveal?: TalonReveal;
        playing_reveal?: never;
        talon_selection?: never;
        stash?: never;
        game_end?: never;
        game_start_countdown?: never;
        predictions_resend?: never;
        radelci?: never;
        time?: never;
        chat_message?: never;
        invite_player?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
        talon_reveal?: never;
        playing_reveal?: PlayingReveal;
        talon_selection?: never;
        stash?: never;
        game_end?: never;
        game_start_countdown?: never;
        predictions_resend?: never;
        radelci?: never;
        time?: never;
        chat_message?: never;
        invite_player?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
        talon_reveal?: never;
        playing_reveal?: never;
        talon_selection?: TalonSelection;
        stash?: never;
        game_end?: never;
        game_start_countdown?: never;
        predictions_resend?: never;
        radelci?: never;
        time?: never;
        chat_message?: never;
        invite_player?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
        talon_reveal?: never;
        playing_reveal?: never;
        talon_selection?: never;
        stash?: Stash;
        game_end?: never;
        game_start_countdown?: never;
        predictions_resend?: never;
        radelci?: never;
        time?: never;
        chat_message?: never;
        invite_player?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
        talon_reveal?: never;
        playing_reveal?: never;
        talon_selection?: never;
        stash?: never;
        game_end?: GameEnd;
        game_start_countdown?: never;
        predictions_resend?: never;
        radelci?: never;
        time?: never;
        chat_message?: never;
        invite_player?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
        talon_reveal?: never;
        playing_reveal?: never;
        talon_selection?: never;
        stash?: never;
        game_end?: never;
        game_start_countdown?: GameStartCountdown;
        predictions_resend?: never;
        radelci?: never;
        time?: never;
        chat_message?: never;
        invite_player?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
        talon_reveal?: never;
        playing_reveal?: never;
        talon_selection?: never;
        stash?: never;
        game_end?: never;
        game_start_countdown?: never;
        predictions_resend?: Predictions;
        radelci?: never;
        time?: never;
        chat_message?: never;
        invite_player?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
        talon_reveal?: never;
        playing_reveal?: never;
        talon_selection?: never;
        stash?: never;
        game_end?: never;
        game_start_countdown?: never;
        predictions_resend?: never;
        radelci?: Radelci;
        time?: never;
        chat_message?: never;
        invite_player?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
        talon_reveal?: never;
        playing_reveal?: never;
        talon_selection?: never;
        stash?: never;
        game_end?: never;
        game_start_countdown?: never;
        predictions_resend?: never;
        radelci?: never;
        time?: Time;
        chat_message?: never;
        invite_player?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
        talon_reveal?: never;
        playing_reveal?: never;
        talon_selection?: never;
        stash?: never;
        game_end?: never;
        game_start_countdown?: never;
        predictions_resend?: never;
        radelci?: never;
        time?: never;
        chat_message?: ChatMessage;
        invite_player?: never;
    } | {
        connection?: never;
        licitiranje?: never;
        card?: never;
        licitiranje_start?: never;
        game_start?: never;
        login_request?: never;
        login_info?: never;
        login_response?: never;
        clear_desk?: never;
        results?: never;
        user_list?: never;
        king_selection?: never;
        start_predictions?: never;
        predictions?: never;
        talon_reveal?: never;
        playing_reveal?: never;
        talon_selection?: never;
        stash?: never;
        game_end?: never;
        game_start_countdown?: never;
        predictions_resend?: never;
        radelci?: never;
        time?: never;
        chat_message?: never;
        invite_player?: InvitePlayer;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("player_id" in data && data.player_id != undefined) {
                this.player_id = data.player_id;
            }
            if ("game_id" in data && data.game_id != undefined) {
                this.game_id = data.game_id;
            }
            if ("connection" in data && data.connection != undefined) {
                this.connection = data.connection;
            }
            if ("licitiranje" in data && data.licitiranje != undefined) {
                this.licitiranje = data.licitiranje;
            }
            if ("card" in data && data.card != undefined) {
                this.card = data.card;
            }
            if ("licitiranje_start" in data && data.licitiranje_start != undefined) {
                this.licitiranje_start = data.licitiranje_start;
            }
            if ("game_start" in data && data.game_start != undefined) {
                this.game_start = data.game_start;
            }
            if ("login_request" in data && data.login_request != undefined) {
                this.login_request = data.login_request;
            }
            if ("login_info" in data && data.login_info != undefined) {
                this.login_info = data.login_info;
            }
            if ("login_response" in data && data.login_response != undefined) {
                this.login_response = data.login_response;
            }
            if ("clear_desk" in data && data.clear_desk != undefined) {
                this.clear_desk = data.clear_desk;
            }
            if ("results" in data && data.results != undefined) {
                this.results = data.results;
            }
            if ("user_list" in data && data.user_list != undefined) {
                this.user_list = data.user_list;
            }
            if ("king_selection" in data && data.king_selection != undefined) {
                this.king_selection = data.king_selection;
            }
            if ("start_predictions" in data && data.start_predictions != undefined) {
                this.start_predictions = data.start_predictions;
            }
            if ("predictions" in data && data.predictions != undefined) {
                this.predictions = data.predictions;
            }
            if ("talon_reveal" in data && data.talon_reveal != undefined) {
                this.talon_reveal = data.talon_reveal;
            }
            if ("playing_reveal" in data && data.playing_reveal != undefined) {
                this.playing_reveal = data.playing_reveal;
            }
            if ("talon_selection" in data && data.talon_selection != undefined) {
                this.talon_selection = data.talon_selection;
            }
            if ("stash" in data && data.stash != undefined) {
                this.stash = data.stash;
            }
            if ("game_end" in data && data.game_end != undefined) {
                this.game_end = data.game_end;
            }
            if ("game_start_countdown" in data && data.game_start_countdown != undefined) {
                this.game_start_countdown = data.game_start_countdown;
            }
            if ("predictions_resend" in data && data.predictions_resend != undefined) {
                this.predictions_resend = data.predictions_resend;
            }
            if ("radelci" in data && data.radelci != undefined) {
                this.radelci = data.radelci;
            }
            if ("time" in data && data.time != undefined) {
                this.time = data.time;
            }
            if ("chat_message" in data && data.chat_message != undefined) {
                this.chat_message = data.chat_message;
            }
            if ("invite_player" in data && data.invite_player != undefined) {
                this.invite_player = data.invite_player;
            }
        }
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get player_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set player_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get game_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set game_id(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get connection() {
        return pb_1.Message.getWrapperField(this, Connection, 4) as Connection;
    }
    set connection(value: Connection) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get has_connection() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get licitiranje() {
        return pb_1.Message.getWrapperField(this, Licitiranje, 5) as Licitiranje;
    }
    set licitiranje(value: Licitiranje) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
    }
    get has_licitiranje() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get card() {
        return pb_1.Message.getWrapperField(this, Card, 6) as Card;
    }
    set card(value: Card) {
        pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
    }
    get has_card() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get licitiranje_start() {
        return pb_1.Message.getWrapperField(this, LicitiranjeStart, 7) as LicitiranjeStart;
    }
    set licitiranje_start(value: LicitiranjeStart) {
        pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
    }
    get has_licitiranje_start() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get game_start() {
        return pb_1.Message.getWrapperField(this, GameStart, 8) as GameStart;
    }
    set game_start(value: GameStart) {
        pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
    }
    get has_game_start() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get login_request() {
        return pb_1.Message.getWrapperField(this, LoginRequest, 9) as LoginRequest;
    }
    set login_request(value: LoginRequest) {
        pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
    }
    get has_login_request() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get login_info() {
        return pb_1.Message.getWrapperField(this, LoginInfo, 10) as LoginInfo;
    }
    set login_info(value: LoginInfo) {
        pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
    }
    get has_login_info() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get login_response() {
        return pb_1.Message.getWrapperField(this, LoginResponse, 11) as LoginResponse;
    }
    set login_response(value: LoginResponse) {
        pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
    }
    get has_login_response() {
        return pb_1.Message.getField(this, 11) != null;
    }
    get clear_desk() {
        return pb_1.Message.getWrapperField(this, ClearDesk, 12) as ClearDesk;
    }
    set clear_desk(value: ClearDesk) {
        pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
    }
    get has_clear_desk() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get results() {
        return pb_1.Message.getWrapperField(this, Results, 13) as Results;
    }
    set results(value: Results) {
        pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
    }
    get has_results() {
        return pb_1.Message.getField(this, 13) != null;
    }
    get user_list() {
        return pb_1.Message.getWrapperField(this, UserList, 14) as UserList;
    }
    set user_list(value: UserList) {
        pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
    }
    get has_user_list() {
        return pb_1.Message.getField(this, 14) != null;
    }
    get king_selection() {
        return pb_1.Message.getWrapperField(this, KingSelection, 15) as KingSelection;
    }
    set king_selection(value: KingSelection) {
        pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
    }
    get has_king_selection() {
        return pb_1.Message.getField(this, 15) != null;
    }
    get start_predictions() {
        return pb_1.Message.getWrapperField(this, StartPredictions, 16) as StartPredictions;
    }
    set start_predictions(value: StartPredictions) {
        pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
    }
    get has_start_predictions() {
        return pb_1.Message.getField(this, 16) != null;
    }
    get predictions() {
        return pb_1.Message.getWrapperField(this, Predictions, 17) as Predictions;
    }
    set predictions(value: Predictions) {
        pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
    }
    get has_predictions() {
        return pb_1.Message.getField(this, 17) != null;
    }
    get talon_reveal() {
        return pb_1.Message.getWrapperField(this, TalonReveal, 18) as TalonReveal;
    }
    set talon_reveal(value: TalonReveal) {
        pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
    }
    get has_talon_reveal() {
        return pb_1.Message.getField(this, 18) != null;
    }
    get playing_reveal() {
        return pb_1.Message.getWrapperField(this, PlayingReveal, 19) as PlayingReveal;
    }
    set playing_reveal(value: PlayingReveal) {
        pb_1.Message.setOneofWrapperField(this, 19, this.#one_of_decls[0], value);
    }
    get has_playing_reveal() {
        return pb_1.Message.getField(this, 19) != null;
    }
    get talon_selection() {
        return pb_1.Message.getWrapperField(this, TalonSelection, 20) as TalonSelection;
    }
    set talon_selection(value: TalonSelection) {
        pb_1.Message.setOneofWrapperField(this, 20, this.#one_of_decls[0], value);
    }
    get has_talon_selection() {
        return pb_1.Message.getField(this, 20) != null;
    }
    get stash() {
        return pb_1.Message.getWrapperField(this, Stash, 21) as Stash;
    }
    set stash(value: Stash) {
        pb_1.Message.setOneofWrapperField(this, 21, this.#one_of_decls[0], value);
    }
    get has_stash() {
        return pb_1.Message.getField(this, 21) != null;
    }
    get game_end() {
        return pb_1.Message.getWrapperField(this, GameEnd, 22) as GameEnd;
    }
    set game_end(value: GameEnd) {
        pb_1.Message.setOneofWrapperField(this, 22, this.#one_of_decls[0], value);
    }
    get has_game_end() {
        return pb_1.Message.getField(this, 22) != null;
    }
    get game_start_countdown() {
        return pb_1.Message.getWrapperField(this, GameStartCountdown, 23) as GameStartCountdown;
    }
    set game_start_countdown(value: GameStartCountdown) {
        pb_1.Message.setOneofWrapperField(this, 23, this.#one_of_decls[0], value);
    }
    get has_game_start_countdown() {
        return pb_1.Message.getField(this, 23) != null;
    }
    get predictions_resend() {
        return pb_1.Message.getWrapperField(this, Predictions, 24) as Predictions;
    }
    set predictions_resend(value: Predictions) {
        pb_1.Message.setOneofWrapperField(this, 24, this.#one_of_decls[0], value);
    }
    get has_predictions_resend() {
        return pb_1.Message.getField(this, 24) != null;
    }
    get radelci() {
        return pb_1.Message.getWrapperField(this, Radelci, 25) as Radelci;
    }
    set radelci(value: Radelci) {
        pb_1.Message.setOneofWrapperField(this, 25, this.#one_of_decls[0], value);
    }
    get has_radelci() {
        return pb_1.Message.getField(this, 25) != null;
    }
    get time() {
        return pb_1.Message.getWrapperField(this, Time, 26) as Time;
    }
    set time(value: Time) {
        pb_1.Message.setOneofWrapperField(this, 26, this.#one_of_decls[0], value);
    }
    get has_time() {
        return pb_1.Message.getField(this, 26) != null;
    }
    get chat_message() {
        return pb_1.Message.getWrapperField(this, ChatMessage, 27) as ChatMessage;
    }
    set chat_message(value: ChatMessage) {
        pb_1.Message.setOneofWrapperField(this, 27, this.#one_of_decls[0], value);
    }
    get has_chat_message() {
        return pb_1.Message.getField(this, 27) != null;
    }
    get invite_player() {
        return pb_1.Message.getWrapperField(this, InvitePlayer, 28) as InvitePlayer;
    }
    set invite_player(value: InvitePlayer) {
        pb_1.Message.setOneofWrapperField(this, 28, this.#one_of_decls[0], value);
    }
    get has_invite_player() {
        return pb_1.Message.getField(this, 28) != null;
    }
    get data() {
        const cases: {
            [index: number]: "none" | "connection" | "licitiranje" | "card" | "licitiranje_start" | "game_start" | "login_request" | "login_info" | "login_response" | "clear_desk" | "results" | "user_list" | "king_selection" | "start_predictions" | "predictions" | "talon_reveal" | "playing_reveal" | "talon_selection" | "stash" | "game_end" | "game_start_countdown" | "predictions_resend" | "radelci" | "time" | "chat_message" | "invite_player";
        } = {
            0: "none",
            4: "connection",
            5: "licitiranje",
            6: "card",
            7: "licitiranje_start",
            8: "game_start",
            9: "login_request",
            10: "login_info",
            11: "login_response",
            12: "clear_desk",
            13: "results",
            14: "user_list",
            15: "king_selection",
            16: "start_predictions",
            17: "predictions",
            18: "talon_reveal",
            19: "playing_reveal",
            20: "talon_selection",
            21: "stash",
            22: "game_end",
            23: "game_start_countdown",
            24: "predictions_resend",
            25: "radelci",
            26: "time",
            27: "chat_message",
            28: "invite_player"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])];
    }
    static fromObject(data: {
        username?: string;
        player_id?: string;
        game_id?: string;
        connection?: ReturnType<typeof Connection.prototype.toObject>;
        licitiranje?: ReturnType<typeof Licitiranje.prototype.toObject>;
        card?: ReturnType<typeof Card.prototype.toObject>;
        licitiranje_start?: ReturnType<typeof LicitiranjeStart.prototype.toObject>;
        game_start?: ReturnType<typeof GameStart.prototype.toObject>;
        login_request?: ReturnType<typeof LoginRequest.prototype.toObject>;
        login_info?: ReturnType<typeof LoginInfo.prototype.toObject>;
        login_response?: ReturnType<typeof LoginResponse.prototype.toObject>;
        clear_desk?: ReturnType<typeof ClearDesk.prototype.toObject>;
        results?: ReturnType<typeof Results.prototype.toObject>;
        user_list?: ReturnType<typeof UserList.prototype.toObject>;
        king_selection?: ReturnType<typeof KingSelection.prototype.toObject>;
        start_predictions?: ReturnType<typeof StartPredictions.prototype.toObject>;
        predictions?: ReturnType<typeof Predictions.prototype.toObject>;
        talon_reveal?: ReturnType<typeof TalonReveal.prototype.toObject>;
        playing_reveal?: ReturnType<typeof PlayingReveal.prototype.toObject>;
        talon_selection?: ReturnType<typeof TalonSelection.prototype.toObject>;
        stash?: ReturnType<typeof Stash.prototype.toObject>;
        game_end?: ReturnType<typeof GameEnd.prototype.toObject>;
        game_start_countdown?: ReturnType<typeof GameStartCountdown.prototype.toObject>;
        predictions_resend?: ReturnType<typeof Predictions.prototype.toObject>;
        radelci?: ReturnType<typeof Radelci.prototype.toObject>;
        time?: ReturnType<typeof Time.prototype.toObject>;
        chat_message?: ReturnType<typeof ChatMessage.prototype.toObject>;
        invite_player?: ReturnType<typeof InvitePlayer.prototype.toObject>;
    }): Message {
        const message = new Message({});
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.player_id != null) {
            message.player_id = data.player_id;
        }
        if (data.game_id != null) {
            message.game_id = data.game_id;
        }
        if (data.connection != null) {
            message.connection = Connection.fromObject(data.connection);
        }
        if (data.licitiranje != null) {
            message.licitiranje = Licitiranje.fromObject(data.licitiranje);
        }
        if (data.card != null) {
            message.card = Card.fromObject(data.card);
        }
        if (data.licitiranje_start != null) {
            message.licitiranje_start = LicitiranjeStart.fromObject(data.licitiranje_start);
        }
        if (data.game_start != null) {
            message.game_start = GameStart.fromObject(data.game_start);
        }
        if (data.login_request != null) {
            message.login_request = LoginRequest.fromObject(data.login_request);
        }
        if (data.login_info != null) {
            message.login_info = LoginInfo.fromObject(data.login_info);
        }
        if (data.login_response != null) {
            message.login_response = LoginResponse.fromObject(data.login_response);
        }
        if (data.clear_desk != null) {
            message.clear_desk = ClearDesk.fromObject(data.clear_desk);
        }
        if (data.results != null) {
            message.results = Results.fromObject(data.results);
        }
        if (data.user_list != null) {
            message.user_list = UserList.fromObject(data.user_list);
        }
        if (data.king_selection != null) {
            message.king_selection = KingSelection.fromObject(data.king_selection);
        }
        if (data.start_predictions != null) {
            message.start_predictions = StartPredictions.fromObject(data.start_predictions);
        }
        if (data.predictions != null) {
            message.predictions = Predictions.fromObject(data.predictions);
        }
        if (data.talon_reveal != null) {
            message.talon_reveal = TalonReveal.fromObject(data.talon_reveal);
        }
        if (data.playing_reveal != null) {
            message.playing_reveal = PlayingReveal.fromObject(data.playing_reveal);
        }
        if (data.talon_selection != null) {
            message.talon_selection = TalonSelection.fromObject(data.talon_selection);
        }
        if (data.stash != null) {
            message.stash = Stash.fromObject(data.stash);
        }
        if (data.game_end != null) {
            message.game_end = GameEnd.fromObject(data.game_end);
        }
        if (data.game_start_countdown != null) {
            message.game_start_countdown = GameStartCountdown.fromObject(data.game_start_countdown);
        }
        if (data.predictions_resend != null) {
            message.predictions_resend = Predictions.fromObject(data.predictions_resend);
        }
        if (data.radelci != null) {
            message.radelci = Radelci.fromObject(data.radelci);
        }
        if (data.time != null) {
            message.time = Time.fromObject(data.time);
        }
        if (data.chat_message != null) {
            message.chat_message = ChatMessage.fromObject(data.chat_message);
        }
        if (data.invite_player != null) {
            message.invite_player = InvitePlayer.fromObject(data.invite_player);
        }
        return message;
    }
    toObject() {
        const data: {
            username?: string;
            player_id?: string;
            game_id?: string;
            connection?: ReturnType<typeof Connection.prototype.toObject>;
            licitiranje?: ReturnType<typeof Licitiranje.prototype.toObject>;
            card?: ReturnType<typeof Card.prototype.toObject>;
            licitiranje_start?: ReturnType<typeof LicitiranjeStart.prototype.toObject>;
            game_start?: ReturnType<typeof GameStart.prototype.toObject>;
            login_request?: ReturnType<typeof LoginRequest.prototype.toObject>;
            login_info?: ReturnType<typeof LoginInfo.prototype.toObject>;
            login_response?: ReturnType<typeof LoginResponse.prototype.toObject>;
            clear_desk?: ReturnType<typeof ClearDesk.prototype.toObject>;
            results?: ReturnType<typeof Results.prototype.toObject>;
            user_list?: ReturnType<typeof UserList.prototype.toObject>;
            king_selection?: ReturnType<typeof KingSelection.prototype.toObject>;
            start_predictions?: ReturnType<typeof StartPredictions.prototype.toObject>;
            predictions?: ReturnType<typeof Predictions.prototype.toObject>;
            talon_reveal?: ReturnType<typeof TalonReveal.prototype.toObject>;
            playing_reveal?: ReturnType<typeof PlayingReveal.prototype.toObject>;
            talon_selection?: ReturnType<typeof TalonSelection.prototype.toObject>;
            stash?: ReturnType<typeof Stash.prototype.toObject>;
            game_end?: ReturnType<typeof GameEnd.prototype.toObject>;
            game_start_countdown?: ReturnType<typeof GameStartCountdown.prototype.toObject>;
            predictions_resend?: ReturnType<typeof Predictions.prototype.toObject>;
            radelci?: ReturnType<typeof Radelci.prototype.toObject>;
            time?: ReturnType<typeof Time.prototype.toObject>;
            chat_message?: ReturnType<typeof ChatMessage.prototype.toObject>;
            invite_player?: ReturnType<typeof InvitePlayer.prototype.toObject>;
        } = {};
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.player_id != null) {
            data.player_id = this.player_id;
        }
        if (this.game_id != null) {
            data.game_id = this.game_id;
        }
        if (this.connection != null) {
            data.connection = this.connection.toObject();
        }
        if (this.licitiranje != null) {
            data.licitiranje = this.licitiranje.toObject();
        }
        if (this.card != null) {
            data.card = this.card.toObject();
        }
        if (this.licitiranje_start != null) {
            data.licitiranje_start = this.licitiranje_start.toObject();
        }
        if (this.game_start != null) {
            data.game_start = this.game_start.toObject();
        }
        if (this.login_request != null) {
            data.login_request = this.login_request.toObject();
        }
        if (this.login_info != null) {
            data.login_info = this.login_info.toObject();
        }
        if (this.login_response != null) {
            data.login_response = this.login_response.toObject();
        }
        if (this.clear_desk != null) {
            data.clear_desk = this.clear_desk.toObject();
        }
        if (this.results != null) {
            data.results = this.results.toObject();
        }
        if (this.user_list != null) {
            data.user_list = this.user_list.toObject();
        }
        if (this.king_selection != null) {
            data.king_selection = this.king_selection.toObject();
        }
        if (this.start_predictions != null) {
            data.start_predictions = this.start_predictions.toObject();
        }
        if (this.predictions != null) {
            data.predictions = this.predictions.toObject();
        }
        if (this.talon_reveal != null) {
            data.talon_reveal = this.talon_reveal.toObject();
        }
        if (this.playing_reveal != null) {
            data.playing_reveal = this.playing_reveal.toObject();
        }
        if (this.talon_selection != null) {
            data.talon_selection = this.talon_selection.toObject();
        }
        if (this.stash != null) {
            data.stash = this.stash.toObject();
        }
        if (this.game_end != null) {
            data.game_end = this.game_end.toObject();
        }
        if (this.game_start_countdown != null) {
            data.game_start_countdown = this.game_start_countdown.toObject();
        }
        if (this.predictions_resend != null) {
            data.predictions_resend = this.predictions_resend.toObject();
        }
        if (this.radelci != null) {
            data.radelci = this.radelci.toObject();
        }
        if (this.time != null) {
            data.time = this.time.toObject();
        }
        if (this.chat_message != null) {
            data.chat_message = this.chat_message.toObject();
        }
        if (this.invite_player != null) {
            data.invite_player = this.invite_player.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.username.length)
            writer.writeString(1, this.username);
        if (this.player_id.length)
            writer.writeString(2, this.player_id);
        if (this.game_id.length)
            writer.writeString(3, this.game_id);
        if (this.has_connection)
            writer.writeMessage(4, this.connection, () => this.connection.serialize(writer));
        if (this.has_licitiranje)
            writer.writeMessage(5, this.licitiranje, () => this.licitiranje.serialize(writer));
        if (this.has_card)
            writer.writeMessage(6, this.card, () => this.card.serialize(writer));
        if (this.has_licitiranje_start)
            writer.writeMessage(7, this.licitiranje_start, () => this.licitiranje_start.serialize(writer));
        if (this.has_game_start)
            writer.writeMessage(8, this.game_start, () => this.game_start.serialize(writer));
        if (this.has_login_request)
            writer.writeMessage(9, this.login_request, () => this.login_request.serialize(writer));
        if (this.has_login_info)
            writer.writeMessage(10, this.login_info, () => this.login_info.serialize(writer));
        if (this.has_login_response)
            writer.writeMessage(11, this.login_response, () => this.login_response.serialize(writer));
        if (this.has_clear_desk)
            writer.writeMessage(12, this.clear_desk, () => this.clear_desk.serialize(writer));
        if (this.has_results)
            writer.writeMessage(13, this.results, () => this.results.serialize(writer));
        if (this.has_user_list)
            writer.writeMessage(14, this.user_list, () => this.user_list.serialize(writer));
        if (this.has_king_selection)
            writer.writeMessage(15, this.king_selection, () => this.king_selection.serialize(writer));
        if (this.has_start_predictions)
            writer.writeMessage(16, this.start_predictions, () => this.start_predictions.serialize(writer));
        if (this.has_predictions)
            writer.writeMessage(17, this.predictions, () => this.predictions.serialize(writer));
        if (this.has_talon_reveal)
            writer.writeMessage(18, this.talon_reveal, () => this.talon_reveal.serialize(writer));
        if (this.has_playing_reveal)
            writer.writeMessage(19, this.playing_reveal, () => this.playing_reveal.serialize(writer));
        if (this.has_talon_selection)
            writer.writeMessage(20, this.talon_selection, () => this.talon_selection.serialize(writer));
        if (this.has_stash)
            writer.writeMessage(21, this.stash, () => this.stash.serialize(writer));
        if (this.has_game_end)
            writer.writeMessage(22, this.game_end, () => this.game_end.serialize(writer));
        if (this.has_game_start_countdown)
            writer.writeMessage(23, this.game_start_countdown, () => this.game_start_countdown.serialize(writer));
        if (this.has_predictions_resend)
            writer.writeMessage(24, this.predictions_resend, () => this.predictions_resend.serialize(writer));
        if (this.has_radelci)
            writer.writeMessage(25, this.radelci, () => this.radelci.serialize(writer));
        if (this.has_time)
            writer.writeMessage(26, this.time, () => this.time.serialize(writer));
        if (this.has_chat_message)
            writer.writeMessage(27, this.chat_message, () => this.chat_message.serialize(writer));
        if (this.has_invite_player)
            writer.writeMessage(28, this.invite_player, () => this.invite_player.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.username = reader.readString();
                    break;
                case 2:
                    message.player_id = reader.readString();
                    break;
                case 3:
                    message.game_id = reader.readString();
                    break;
                case 4:
                    reader.readMessage(message.connection, () => message.connection = Connection.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.licitiranje, () => message.licitiranje = Licitiranje.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.card, () => message.card = Card.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.licitiranje_start, () => message.licitiranje_start = LicitiranjeStart.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.game_start, () => message.game_start = GameStart.deserialize(reader));
                    break;
                case 9:
                    reader.readMessage(message.login_request, () => message.login_request = LoginRequest.deserialize(reader));
                    break;
                case 10:
                    reader.readMessage(message.login_info, () => message.login_info = LoginInfo.deserialize(reader));
                    break;
                case 11:
                    reader.readMessage(message.login_response, () => message.login_response = LoginResponse.deserialize(reader));
                    break;
                case 12:
                    reader.readMessage(message.clear_desk, () => message.clear_desk = ClearDesk.deserialize(reader));
                    break;
                case 13:
                    reader.readMessage(message.results, () => message.results = Results.deserialize(reader));
                    break;
                case 14:
                    reader.readMessage(message.user_list, () => message.user_list = UserList.deserialize(reader));
                    break;
                case 15:
                    reader.readMessage(message.king_selection, () => message.king_selection = KingSelection.deserialize(reader));
                    break;
                case 16:
                    reader.readMessage(message.start_predictions, () => message.start_predictions = StartPredictions.deserialize(reader));
                    break;
                case 17:
                    reader.readMessage(message.predictions, () => message.predictions = Predictions.deserialize(reader));
                    break;
                case 18:
                    reader.readMessage(message.talon_reveal, () => message.talon_reveal = TalonReveal.deserialize(reader));
                    break;
                case 19:
                    reader.readMessage(message.playing_reveal, () => message.playing_reveal = PlayingReveal.deserialize(reader));
                    break;
                case 20:
                    reader.readMessage(message.talon_selection, () => message.talon_selection = TalonSelection.deserialize(reader));
                    break;
                case 21:
                    reader.readMessage(message.stash, () => message.stash = Stash.deserialize(reader));
                    break;
                case 22:
                    reader.readMessage(message.game_end, () => message.game_end = GameEnd.deserialize(reader));
                    break;
                case 23:
                    reader.readMessage(message.game_start_countdown, () => message.game_start_countdown = GameStartCountdown.deserialize(reader));
                    break;
                case 24:
                    reader.readMessage(message.predictions_resend, () => message.predictions_resend = Predictions.deserialize(reader));
                    break;
                case 25:
                    reader.readMessage(message.radelci, () => message.radelci = Radelci.deserialize(reader));
                    break;
                case 26:
                    reader.readMessage(message.time, () => message.time = Time.deserialize(reader));
                    break;
                case 27:
                    reader.readMessage(message.chat_message, () => message.chat_message = ChatMessage.deserialize(reader));
                    break;
                case 28:
                    reader.readMessage(message.invite_player, () => message.invite_player = InvitePlayer.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Message {
        return Message.deserialize(bytes);
    }
}
